<?xml version='1.0' encoding='utf-8'?>

<section xml:id="S_gitcollabpr">
  <title>The Final Steps</title>
  <introduction>
  <p>
    All that's left to do is to create some pull requests. There are technically two ways you could make this work. You can either open a pull request from your new branch directly to the authoritative main branch or you can merge from your new branch to your fork's main branch and then to the authoritative main branch.
  </p>
  </introduction>
  <subsection xml:id="SS_gitcollabpr">
    <title>Opening a Pull Request</title>
    <idx><h>pull request</h></idx>
    <idx><h>github</h><h>pull request</h></idx>
    <idx><h>merge</h></idx>
    <idx><h>github</h><h>merge</h></idx>
    <idx><h>head repository</h></idx>
    <idx><h>base repository</h></idx>
    <p>
      Use <xref ref="act-git-pr"/> to go back to GitHub and start opening a pull request. When you arrive at the pull request creation screen (titled <q>Comparing changes</q>), you generally have two choices, as mentioned above. The following list describes the branches and repos you should have selected at the top of the screen, under the page heading.
      <ol>
        <li>
          <title>Merge from your new branch to your fork, then to the authoritative</title>
          <p>
            Your base repository should be <c>&lt;your-username>/&lt;your-fork></c>, base should be <c>main</c>, and compare should be <c>&lt;your-branch</c>. Do note that once you select your fork for the base repository, the page will reload and the base and head repository options will disappear.
          </p>
          <p>
            Then, click Create pull request and merge in to main. You may now open another pull request with options base repository of <c>&lt;authoritative-username>/&lt;authoritative-repo></c>, base should be <c>main</c>, head repository should be <c>&lt;your-username>&lt;your-fork></c> and compare should be <c>main</c>.
          </p>
        </li>
        <li>
          <title>Merge from your new branch directly to the authoritative</title>
          <p>
            Your base repository should be <c>&lt;authoritative-username>/&lt;authoritative-repo></c>, base should be <c>main</c>, head repository should be <c>&lt;your-username>&lt;your-fork></c> and compare should be <c>&lt;your-branch></c>.
          </p>
        </li>
      </ol>
    </p>

    <p>
      After either of those two, click on <q>Create pull request</q>, enter a title, and click <q>Create pull request</q> again. From there, you will have to wait for approval and moderator merge.
    </p>

  </subsection>

  <subsection xml:id="SS_gitcollabpull">
    <title>Pulling/Fetching Upstream</title>
    <idx><h>fetch upstream</h></idx>
    <idx><h>upstream</h></idx>
    <idx><h>remote</h><h>upstream</h></idx>
    <idx><h>pull</h></idx>
    <idx><h>git</h><h>pull</h></idx>
    <p>
      Recall from <xref ref="S_hubcollabfetch"/> that you can update your fork with the latest upstream changes through the <q>Fetch upstream</q> button. That works great for updating the fork, but it doesn't update your local clone. There are two main ways in which you can update both your fork and your clone with new changes to upstream.
    </p>

    <project xml:id="try-git-pull-origin">
      <title>Updating Origin and Local, Method 1</title>
      <idx><h>git</h><h>pull</h></idx>
      <idx><h>pull</h></idx>
      <idx><h>origin</h></idx>
      <idx><h>remote</h><h>origin</h></idx>
      <introduction>
        <p>
          This method will first fetch upstream on GitHub, then pull in changes from origin.
        </p>
      </introduction>

      <task>
        <statement>
          <p>
            Use <xref ref="SS_fetchupstream"/> to fetch (and merge) upstream content into the main branch of your fork (origin).
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Now, head back to your terminal and make sure you are navigated to your clone. Do a check to make sure you are on your main branch; if not, use <c>git switch main</c>.
          </p>
          <p>
            If you are planning on making more changes to a branch, but want it updated to the latest upstream changes, you can stay on a branch. If you have any uncommitted changes, you might make a merge conflict.
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Now use <c>git pull</c> to pull in the changes from your recently-updated fork. <xref ref="try-git-pull"/> may be helpful. Just remember that you are pulling in changes from the main branch on origin.
          </p>
        </statement>
        <answer>
          <p>
            <c>git pull origin main</c> (if you are pulling from origin, just <c>git pull</c> can work, too)
          </p>
        </answer>
      </task>
    </project>

    <project xml:id="try-git-pull-upstream">
      <title>Updating Origin and Local, Method 2</title>
      <idx><h>git</h><h>add remote</h></idx>
      <idx><h>remote</h><h>origin</h></idx>
      <idx><h>remote</h><h>upstream</h></idx>
      <idx><h>upstream</h></idx>
      <idx><h>pull</h></idx>
      <idx><h>push</h></idx>
      <idx><h>git</h><h>pull</h></idx>
      <idx><h>git</h><h>push</h></idx>
      <introduction>
        <p>
          This method will first set up a remote to upstream, pull in changes from upstream, then push changes to origin.
        </p>
      </introduction>

      <task>
        <statement>
          <p>
            Head to your terminal and make sure you are navigated to your clone. Do a check to make sure you are on your main branch; if not, use <c>git switch main</c>.
          </p>
          <p>
            If you are planning on making more changes to a branch, but want it updated to the latest upstream changes, you can stay on a branch. If you have any uncommitted changes, you might make a merge conflict.
          </p>
        </statement>
      </task>

      <task>
        <introduction>
          <p>
            This step will only have to be done once per repo that you have forked, then cloned. When you clone a fork, the connection between origin and upstream is not carried over. If I tried to pull from upstream without this connection, I would get an error:
          </p>
            <console prompt="> ">
              <input>git pull upstream main</input>
              <output>
              fatal: 'upstream' does not appear to be a git repository
              fatal: Coult not read from remote repository.

              Please make sure you have the correct access rights
              and the repository exists.
              </output>
            </console>
          
          <p>
            This is troublesome! Clearly upstream exists; how else would we have forked it? To fix this, you need to manually set the remote connection. Again, this only has to be done once per forked/cloned repo.
          </p>
        </introduction>
          <task>
            <statement>
              <p>
                Navigate to the authoritative repo's homepage and copy its <init>HTTPS</init> clone link, just as if you were going to clone the repo.
              </p>
            </statement>
          </task>

          <task>
            <statement>
              <p>
                Head back to your terminal and use <c>git remote add upstream &lt;https-link></c>. There will be no output.
              </p>
            </statement>
          </task>

          <task>
            <statement>
              <p>
                Verify that it worked with <c>git remote -v</c>. This will print out the HTTPS links for origin and upstream. Make sure your username is on the origin remotes and the official repo/username is on the upstream remotes.
              </p>
            </statement>
          </task>
        </task>

        <task>
          <statement>
            <p>
              Ok, that was the hardest part. Once again, that only has to be done once. After that, every time you want to pull from upstream and update local and origin, you just need two commands: <c>git pull upstream main</c> and <c>git push origin main</c>.
            </p>
            <p>
              <c>git pull</c> will fetch and merge upstream changes from its main branch and <c>git push</c> will take all of your files and push them to origin, updating them there.
            </p>
          </statement>
        </task>
      
    </project>

    <warning xml:id="warn-pull-often">
      <title>Use <c>git pull</c> Frequently</title>
      
      <p>
        On a repository for which you are an active editor, do not get behind on your pulls. As mentioned in <xref ref="warn-fetch-often"/>, sometimes changes to upstream can improve or change how you work locally. Pulling often keeps your work at the very edge of the Git tree and reduces the likelihood you create a merge conflict. You also want to push back to origin often to prevent merge conflicts with yourself.
      </p>
    </warning>
    
  </subsection>
  
</section>