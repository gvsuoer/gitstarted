<?xml version='1.0' encoding='utf-8'?>

<appendix xml:id="app_gittroubles">
  <title>Common Git Troubles and How To Fix Them</title>
  <idx><h>git</h><h>troubles</h></idx>
  <introduction>
    <p>
      We all make mistakes, especially with Git. You don't know how many times I have staged the wrong files or committed my changes before realizing I did something wrong. Of course, it's best to try and avoid these issues becasue they can cause headaches and frustration. Plus there's usually a little fear involved (did I just erase my edits?) as well as hesitation (Git only does what I tell it, so I have to make sure I do it right). But just in case something happened that you didn't expect or you made a mistake, I have your back. Below are some common mistakes and questions you might ask. 
    </p>
  </introduction>

  <section xml:id="SS_reverseadd">
    <title>Uh Oh, I Staged the Wrong Files!</title>
    <idx><h>git</h><h>add</h></idx>
    <idx><h>staging</h></idx>
    
      <p>
        Once you get the hang of Git, it's easy to just fly through the three-step process. In doing so, you will inevitably stage (with <c>git add</c>) a file or folder on accident. This is relatively simple to fix. To undo this, follow the next procedure. 
      </p>
    
    
    <project xml:id="reverse-git-add">
      <title>Reversing <c>git add</c></title>
      
      <introduction>
        <p>
          Oh shoot. What if you add a file you didn't mean to? This is one reason why there are so many steps to sending files to GitHub. Humans make mistakes and Git gives you the chance to correct any. Should you ever add a file you didn't mean to add, revist this procedure.
        </p>
      </introduction>
      <task>
        <statement>
          <p>
            Identify the file name(s) and extension(s) of the file(s) you mistakenly added.
          </p>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            Use <c>git restore --staged &lt;your-file-name(s)></c> to un-stage any files. Like <c>git add</c>, this command can be run many times.
          </p>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            It might be wise to verify with <c>git status</c> that everything looks good.
          </p>
        </statement>
      </task>
    </project>
   
  </section>

  <section xml:id="SS_reversecommit">
    <title>Uh Oh, I Committed Too Early!</title>
    <idx><h>git</h><h>commit</h></idx>
    <idx><h>commit files</h></idx>
    
      <p>
        We've all been there. You <c>add</c> all the files you need, double check to make sure you aren't missing anything, <c>commit</c> with a message and suddenly remember a file you should have added. Never fear, <c>git reset</c> is here!
      </p>

    <project xml:id="reverse-git-commit">
      <title>Reversing <c>git commit</c></title>
      
      <task>
        <p>
          You will only need this command: <c>git reset --soft HEAD^1</c>. It should be safe to copy/paste this command directly into your command line and run it.
        </p>
      </task>

      <task>
        <p>
          <c>git reset</c> gives no output so it is super important to check that the command worked with <c>git status</c> (<xref ref="try-git-status"/>). If everything worked, you should see output as if you had used <c>git status</c> after a <c>git add</c> step. 
        </p>
        <p>
          Depending on how many commits you made, you may need to run this above command more than once. If so, make sure to use <c>git status</c> after each try!
        </p>
      </task>

      <task>
        <p>
          Your previously staged files should still exist. From this point, use <c>git add</c> to add your missing file(s) and proceed with <c>git commit</c>.
        </p>
      </task>
    </project>
    
    
  </section>

  <section xml:id="S_untrackfiles">
    <title>Git Has Been Updating Files, But Now I Don't Want It To</title>
    <idx><h>tracking</h></idx>
    <idx><h>git</h><h>tracking</h></idx>
    <p>
      This is actually pretty common. Maybe you are writing a book and your abandoned chapters were on GitHub for your editors to look at. Now that the book is published, you don't want those chapters online. Maybe you are using an API and when you were developing a project had your app's API connection keys available and not that the project is public you want to remove the file containing them.
    </p>
    <p>
      When Git is keeping track of files, we say that it is <term>tracking</term> files. Untracking files is not super difficult, but does, like all Git commands, require the command line.
    </p>

    <warning xml:id="warn-untrack-delete">
      <p>
        Untracking files from Git <em>does not delete them from your local computer</em>. However, the next time you push to GitHub, they will no longer be there. Thus, the next time your collaborators pull from the repository, their copy of the file will be deleted.
      </p>
    </warning>

    <project>
      <title>Untracking Files from Git</title>
      
      <task>
        <statement>
          <p>
            Identify the <em>files</em> you wish to remove from Git's tracking service
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Use <c>git rm --cached &lt;filename></c>. You may also add multiple files as done with <c>git add</c> (<xref ref="try-git-add"/>).
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Want to untrack folders? You will need the <c>-r</c> recursive option. So, <c>git rm -r --cached &lt;folder-name></c> will do the trick.
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            The above options will not delete the file(s)/folder(s) from your local computer. If you would like the files deleted and untracked, use the above commands with out the <c>--cached</c> feature: <c>git rm &lt;filenames></c> and <c>git rm -r &lt;folder-names></c>.
          </p>
        </statement>
      </task>
    </project>

  </section>

  <section xml:id="S_forcemerge">
    <title>Git Won't Let Me Pull From Upstream or Origin!</title>
    <idx><h>git</h><h>pull</h></idx>
    <idx><h>remote</h><h>upstream</h></idx>
    <idx><h>remote</h><h>origin</h></idx>
    <idx><h>upstream</h></idx>
    <idx><h>origin</h></idx>
    <introduction>
      <p>
        Ah, perhaps you forgot to make a branch. This error happens to me a lot when I have a lot of work on the main branch because I never made a separate branch (not smart of me, I know).
      </p>
      <p>
        Or maybe not. Either way, Git says you have a problem with your code and won't let you merge from upstream. Maybe you get a message like this:
      </p>
        <console prompt="> ">
          <input>git pull upstream main</input>
          <output>
error: Your local changes to the following files would be overwritten by merge:
        &lt;file-name(s)>
Please commit your changes or stash them before you merge.
Aborting
</output>
</console>

      <p>
        This error occurs when you have local, uncommitted changes and a merge from origin or upstream has changes in the same exact places. Git has no idea whose changes to keep so it does nothing. There are a couple of different things you can do in this situation depending on how you feel about your changes.
      </p>
    </introduction>

    <subsection>
      <title>Your Local Changes Are Irrelevant and You Want Them Overwritten</title>
      
      <idx><h>force merge</h></idx>
      <p>
        This definitely happens! Perhaps you tried a few things and they didn't work so you want to pull from upstream or origin and start over. Maybe you corrected some typos and someone else beat you to it so you want to merge their corrections in and keep working. I could go on and on. It's not difficult at all to force Git to make this happen, just make sure this is what you want to do!
      </p>

      <project>
        <title>Forcing an Upstream or Origin Merge</title>
        
        <task>
          <statement>
            <p>
              First, create a backup branch just in case things go haywire: <c>git branch backup</c>. Since <c>git branch</c> does not automatically switch you to that branch, you are free to carry on.
            </p>
          </statement>
        </task>

        <task>
          <statement>
            <p>
              Now, just fetch the changes. Remember that merging and fetching are separate processes. Fetching just collects the changes, attempting to merge will throw the error. Use <c>git fetch &lt;remote> &lt;branch-name></c>. Example: <c>git fetch upstream main</c>.
            </p>
          </statement>
        </task>

        <task>
          <statement>
            <p>
              Now reset your current branch to the contents you just fetched. This is not a merge, this is a complete reset. You are reverting all of your content to match what you just fetched. This is why we created a backup in case something gets deleted that you didn't want to be.
            </p>
            <p>
              In the event that a file you created gets deleted from the reset, just navigate to the backup branch, stage just the missing file and commit just the missing file to origin. Then pull from origin.
            </p>
            <p>
              But to reset, use <c>git reset --hard &lt;remote>/&lt;branch-name></c>. Continuing the example from above, <c>git reset --hard upstream/main</c>
            </p>
          </statement>
        </task>
      </project>

    </subsection>

    <subsection>
      <title>Your Local Changes are Good and You Want to Keep Them</title>
      <idx><h>git</h><h>stash</h></idx>
      <idx><h>stash</h></idx>
      <p>
        Sometimes your changes are valid and you want them to be kept, but you still want to pull in changes. One option is to force a merge conflict and deal with it in your editor, choosing which version to keep. If this is what you want to do, just <c>add</c> the troublesome files, <c>commit</c> them, then <c>pull</c>. Again, this will force a merge conflict but you can fix things from there.
      </p>

      <p>
        Alternatively, you can keep your changes by using <c>git stash</c>. Stashing will store your changes locally without committing and will let you pull. To bring your changes back you can use <c>git stash pop</c>. In my experience, things have worked out quite nicely with <c>git stash</c>. I just type <c>git stash</c> before pulling, then I pull, then I use <c>git stash pop</c> and my changes are popped right back into where they were. For more information, you might find <url href="https://opensource.com/article/21/4/git-stash" visual="opensource.com/article/21/4/git-stash">opensource.com</url> useful.
      </p>
      <p>
        If <c>git stash pop</c> doesn't work, you may have a bigger problem on your hands. You will want to do a Google search if this is your case. This happened to me at one point and unfortunately I had to completely reset my local repository to what was appearing on GitHub. In such an extreme case, I even made a copy of some of my files with my edits before doing any resetting so I could easily add my changes back in.
      </p>

    </subsection>
  </section>
  <section xml:id="S_diverge_branch">
    <title>Git Says I Have Divergent Branches!</title>
    
    <p>
      I recently experienced this issue for the first time and had to do some searching to figure out how to fix it. I relied on <url href="https://stackoverflow.com/questions/62653114" visual='https://stackoverflow.com/questions/62653114'>Davide Casiraghi's question on StackOverflow</url> and <url href="https://stackoverflow.com/questions/29673869/" visual='https://stackoverflow.com/questions/29673869/'>adrianvlupu's question also on StackOverflow</url> to create this guide and you might find these resources more helpful than mine.
    </p>
    <p>
      This is a preemptive warning of a merge conflict and occurs when you are trying to pull in or push out a commit and another commit gets in the way. Git doesn't want to create them, so it refuses to push or pull until you fix something. This is not the same error as in <xref ref="S_forcemerge"/>, although it is closely related. You might get something like this:
    </p>
      <console prompt="> ">
        <input>git push</input>
        <output>To &lt;repo-you-are-pushing-to>.git
 ! [rejected]        main -> main (fetch first)
error: failed to push some refs to '&lt;repo-you-are-pushing-to>.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
</output>
    </console>
    <p>
    This looks kind of scary. Let's see how to fix this.
    </p>

    <project xml:id="try-git-rebase">
      <title>Consolidating Divergent Branches</title>
      
      <task>
        <statement>
          <p>
            The first step will be to try to pull in changes before you push. Use <c>git pull &lt;remote> &lt;branch></c> as needed. If this works, then try to push and everything should be ok.
          </p>
          <p>
            You might get another error like this:
          </p>
            <console prompt="> ">
        <input>git pull origin main</input>
        <output>remote: Enumerating objects: 1, done.
remote: Counting objects: 100% (1/1), done.
remote: Total 1 (delta 0), reused 0 (delta 0), pack-reused 0
Unpacking objects: 100% (1/1), 659 bytes | 659.00 KiB/s, done.
From &lt;repo-you-are-pushing-to>
   2417195..8b492ee  main       -> origin/main
hint: You have divergent branches and need to specify how to reconcile them.
hint: You can do so by running one of the following commands sometime before
hint: your next pull:
hint: 
hint:   git config pull.rebase false  # merge
hint:   git config pull.rebase true   # rebase
hint:   git config pull.ff only       # fast-forward only
hint: 
hint: You can replace "git config" with "git config --global" to set a default
hint: preference for all repositories. You can also pass --rebase, --no-rebase,
hint: or --ff-only on the command line to override the configured default per
hint: invocation.
fatal: Need to specify how to reconcile divergent branches.
</output>
</console>
<p>
            which is quite overwhelming.
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Here, the fix is usually pretty easy but I have to teach you a new term. We need to <term>rebase</term> the branch. When a pull happens, Git fetches new commits from GitHub and merges them into your branch (and this merge is actually a commit in itself). The rebase command will temporarily remove your new commits from the commit history, then pull in the new changes and reinstate your commit into the timeline.
          </p>
          <p>
            If you want to avoid potential large error messages like this again, you might consider changing Git's default behavior. Instead of fetching and merging, you can do a fast-forward merge which does not do a merge commit. When a fast forward is not possible, the error message is much shorter and then you can use the rebase command to fix things.
          </p>
          <p>
            To begin this process, first enter <c>git config pull.ff only</c> into your terminal. This will change the default pull behavior for Git (for your current repository only).
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Now try <c>git pull</c>. Things might work. Great! But if you get an error message of <c>fatal: Not possible to fast-forward, aborting.</c>, use <c>git pull --rebase</c> to perform a rebase. Then <c>git push</c> back to origin or upstream.
          </p>
          <p>
            If you ever want to change the default behavior back to what it was, use <c>git config pull.rebase false</c>. If you want to keep that behavior change we just did and you want to do a one-time fetch-merge pull (the old way), use <c>git pull --ff</c>.
          </p>
        </statement>
      </task>
      
    </project>
  </section>

  <section xml:id="S_hub_revert_commit">
    <title>Reverting To a Previous Commit</title>
    <idx><h>commit</h><h>revert</h></idx>
    <idx><h>revert commit</h></idx>
    <idx><h>git</h><h>commit</h></idx>
    <idx><h>commit hash</h></idx>
    <idx><h>commit</h><h>hash</h></idx>
    <p>
      I have never had to do this (yet) so I don't have direct experience here. However, <url href="https://gist.github.com/gunjanpatel/18f9e4d1eb609597c50c2118e416e6a6" visual='gist.github.com/gunjanpatel/18f9e4d1eb609597c50c2118e416e6a6'>user gunjanpatel on GitHub</url> has created a nice guide. It appears that <c>git reset HEAD^ --hard</c> and then <c>git push origin -f</c> will work. The <c>-f</c> switch forces the push and ignores errors.
    </p>
    <p>
      Some of the guide above refers to what is known as a <term>commit hash</term>, a unique string that identifies each commit on GitHub. These are actually so unique that we only need the first few characters of the string to identify the commit. You can find the hash by using <xref ref="S_hub-seecommits"/>. The string is the random numbers/letters found on the right side of each commit.
    </p>

  </section>

  <section xml:id="S_mergeconflict">
    <title>Merge Conflicts</title>

    <p>
      Hopefully you never have to deal with these. Sometimes, they are pretty simple to fix. Other times, it can cause some headaches. To avoid merge conflicts, pull from upstream often (<xref ref="warn-fetch-often"/> and <xref ref="warn-pull-often"/>). Merge conflicts are caused when more than one person edits the same line of a file. It is possible for two people to edit the same file, but on different lines, and not cause a conflict.
    </p>
    <p>
      I have never caused or had to deal with a serious merge conflict. <url href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-on-github" visual='docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-on-github'>The GitHub documentation</url> has a good post on how to resolve conflicts on GitHub. GitHub will even show you the two (or more) versions and let you choose how to resolve them. You can also <url href="https://docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-using-the-command-line" visual='docs.github.com/en/pull-requests/collaborating-with-pull-requests/addressing-merge-conflicts/resolving-a-merge-conflict-using-the-command-line'>resolve merge conflicts on the command line</url> or in your text editor.
    </p>
    <p>
      I have accidentally caused a merge conflict with myself and with working on the same repository from two different computers and two different accounts. Oops! This is an easy fix because I made the conflict with myself so I know which version is the correct one. If this happens to you, Git might send you to an unfamiliar screen when you try to push or pull. You'll know you have this case if your terminal asks you to type in a reason why the merge must happen or how the conflict is resolved. This typically happens when you try to merge from an upstream main into a local main that has active changes (so create branches!).
    </p>
    <p>
      If you start to get stuck, do a quick Google search. There are many guides and resources out there to help with merge conflicts. <url href="https://happygitwithr.com/git-branches.html?q=merge%20confli#dealing-with-conflicts" visual='https://happygitwithr.com/git-branches.html?q=merge%20confli#dealing-with-conflicts'>Jennifer Bryan</url> has a good guide on merge conflict basics (and some other potential Git issues!) so start there and explore more as needed.
    </p>

    <project>
      <title>Merging from main to main (remote contains changes not on local)</title>
      
      <introduction>
        <p>
          This is for when you are sent into a command line editing tool or a default text editor asking you to provide a reason why the merge is necessary. This may not solve your problem but sometimes all a merge conflict needs is to bypass this screen.
        </p>
      </introduction>

      <task>
        <statement>
          <p>
            Type <c>i</c>
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Type a merge message. This can be something as simple as <q>I have to merge to move on</q> or <q>I know what I want, let me do it</q> (yes, I have actually put that as a message<ellipsis/>is this good? Who knows?).
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Press <kbd>esc</kbd>.
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Type <c>:wq</c> (this stands for write and quit)
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Press <kbd>Enter</kbd> and you may be ok to move forward with the pushing, pulling, and creating of pull requests.
          </p>
        </statement>
      </task>
      
    </project>
    
  </section>
  
</appendix>