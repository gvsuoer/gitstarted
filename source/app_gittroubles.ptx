<?xml version='1.0' encoding='utf-8'?>

<appendix xml:id="app_gittroubles">
  <title>Common Git Troubles and How To Fix Them</title>

  <introduction>
    <p>
      We all make mistakes, especially with Git. You don't know how many times I have staged the wrong files or committed my changes before realizing I did something wrong. Of coursre, it's best to try and avoid these issues becasue they can cause headaches and frustration. Plus there's usually a little fear involved (did I just erase my edits?) as well as hesitation (Git only does what I tell it, so I have to make sure I do it right). But just in case something happened that you didn't expect or you made a mistake, I have your back. Below are some common mistakes and questions you might ask. 
    </p>
  </introduction>

  <section xml:id="SS_reverseadd">
    <title>Uh Oh, I Staged the Wrong Files!</title>

    <introduction>
      <p>
        Once you get the hang of Git, it's easy to just fly through the three-step process. In doing so, you will inevitably stage (with <c>git add</c>) a file or folder on accident. This is relatively simple to fix. To undo this, follow the next procedure. 
      </p>
    </introduction>
    
    <project xml:id="reverse-git-add">
      <title>Reversing <c>git add</c></title>
      
      <introduction>
        <p>
          Oh shoot. What if you add a file you didn't mean to? This is one reason why there are so many steps to sending files to GitHub. Humans make mistakes and Git gives you the chance to correct any. Should you ever add a file you didn't mean to add, revist this procedure.
        </p>
      </introduction>
      <task>
        <statement>
          <p>
            Identify the file name(s) and extension(s) of the file(s) you mistakenly added.
          </p>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            Use <c>git restore --staged &lt;your-file-name(s)></c> to un-stage any files. Like <c>git add</c>, this command can be run many times.
          </p>
        </statement>
      </task>
      <task>
        <statement>
          <p>
            It might be wise to verify with <c>git status</c> that everything looks good.
          </p>
        </statement>
      </task>
    </project>
  </section>

  <section xml:id="SS_reversecommit">
    <title>Uh Oh, I Committed Too Early!</title>

    <introduction>
      <p>
        We've all been there. You <c>add</c> all the files you need, double check to make sure you aren't missing anything, <c>commit</c> with a message and suddenly remember a file you should have added. Never fear, <c>git reset</c> is here!
      </p>
    </introduction>

    <project xml:id="reverse-git-commit">
      <title>Reversing <c>git commit</c></title>
      
      <task>
        <p>
          You will only need this command: <c>git reset --soft HEAD^1</c>. It should be safe to copy/paste this command directly into your command line and run it.
        </p>
      </task>

      <task>
        <p>
          <c>git reset</c> gives no output so it is super important to check that the command worked with <c>git status</c> (<xref ref="try-git-status"/>). If everything worked, you should see output as if you had used <c>git status</c> after a <c>git add</c> step. 
        </p>
        <p>
          Depending on how many commits you made, you may need to run this above command more than once. If so, make sure to use <c>git status</c> after each try!
        </p>
      </task>

      <task>
        <p>
          Your previously staged files should still exist. From this point, use <c>git add</c> to add your missing file(s) and proceed with <c>git commit</c>.
        </p>
      </task>
    </project>
    
  </section>

  <section xml:id="S_untrackfiles">
    <title>Git Has Been Updating Files, But Now I Don't Want It To</title>
    
    <p>
      This is actually pretty common. Maybe you are writing a book and your abandoned chapters were on GitHub for your editors to look at. Now that the book is published, you don't want those chapters online. Maybe you are using and API and when you were developing a project had your app's API connection keys available and not that the project is public you want to remove the file containing them.
    </p>
    <p>
      When Git is keeping track of files, we say that it is <term>tracking</term> files. Untracking files is not super difficult, but does, like all Git commands, require the command line.
    </p>

    <warning>
      <p>
        Untracking files from Git <em>does not delete them from your local computer</em>. However, the next time you push to GitHub, they will no longer be there. Thus, the next time your collaborators pull from the repository, their copy of the file will be deleted.
      </p>
    </warning>

    <project>
      <title>Untracking Files from Git</title>
      
      <task>
        <statement>
          <p>
            Identify the <em>files</em> you wish to remove from Git's tracking service
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Use <c>git rm --cached &lt;filename></c>. You may also add multiple files as done with <c>git add</c> (<xref ref="try-git-add"/>).
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Want to untrack folders? You will need the <c>-r</c> recursive option. So, <c>git rm -r --cached &lt;folder-name></c> will do the trick.
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            The above options will not delete the file(s)/folder(s) from your local computer. If you would like the files deleted and untracked, use the above commands with out the <c>--cached</c> feature: <c>git rm &lt;filenames></c> and <c>git rm -r &lt;folder-names></c>.
          </p>
        </statement>
      </task>
    </project>

  </section>
</appendix>