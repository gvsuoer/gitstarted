<?xml version='1.0' encoding='utf-8'?>

<section xml:id="S_hubcollabfetch">
  <title>Fetching Upstream</title>
  

  <subsection xml:id="SS_fetch">
    <title>First, Fetching</title>
    
    
  <p>
    To answer the question in <xref ref="S_hubcollabedit"/>, we are not quite done. See, even though your fork and the parent repository are connected, updates in one are not automatically reflected in the other. So if you just contributed to a repository and the pull request was accepted, you should be fine. But if someone else's pull request also got approved, your fork will not have those changes. You have to tell GitHub to grab those changes and update your fork.
  </p>

  <p>
    The act of grabbing changes from the parent repository is called <term>fetching</term>, aptly named since that is exactly what you are doing: fetching changes. Technically this is distinct from a related <term>merge</term>. First, you fetch the changes, then you merge the changes into your fork.
  </p>
  </subsection>

  <subsection xml:id="SS_upstream">
  <title>Second, Upstream</title>
  
  
  <p>
    Another important concept is that of <term>upstream</term>. Remember from <xref ref="SS_git-push"/> when we talked about remotes? Back there, I mentioned that there were two types of remotes: origin and upstream and that we would talk about upstream later. Well, now it's later! This idea will become important again when we use Git to collaborate (see if you can figure out why).
  </p>

  <p>
    Any repository you own will have the remote identifier of <q>origin</q>, for you. Any repo you do not own <em>and that you fork</em> will have the remote identifier of <q>upstream</q>. Remember that a remote is like a connection between repositories; it's the definition of the link between them. When you fork a repo, you are creating a remote connection between the parent repo (upstream) and your newly-created fork (origin). As we will explore in <xref ref="C_gitcollab"/>, when you clone a repo, you are create a remote connection between your repo (origin), which would be a fork, and your personal computer (local). 
  </p>

  </subsection>

  <subsection xml:id="SS_fetchupstream">
    <title>Third, Fetching Upstream</title>
    
    <p>
      So in order to have changes from the parent repository reflected in your own fork, you have to <term>fetch upstream</term>. GitHub makes this easy! Remember that dialog box from <xref ref="collab-pr"/>? Back then, we used the <q>Contribute</q> button to start a pull request. Here, we will use the option right next to it: <q>Fetch upstream</q>.
    </p>
    <p>
      First, though, go back to the homepage of your fork. You might notice that a slightly different box has appeared. Now it might say something like <q>This branch is 1 commit <em>behind</em> <c>ian-curtis:main</c></q> (you could have a different number). Earlier you were <em>ahead</em> of <c>ian-curtis:main</c>. What's going on here?
    </p>

    <assemblage xml:id="ahead-behind">
      <title>Ahead vs. Behind</title>
      <p>
        GitHub uses <term>ahead</term> and <term>behind</term> to tell you how your fork currently sits compared to the repo you forked from. Any commit that you have made to your fork that has not been merged into the parent repo ticks up the number of commits ahead you are. Any commit that has been made to the parent repo that is not reflected in your fork ticks up the number of commits behind you are.
      </p>
      <p>
        As an example, you might have a message like <q>This branch is 2 commits ahead, 3 commits behind <c>&lt;parent-repo>:main</c></q>. This means you have made 2 commits that are not on the parent repo and that the parent repo has 3 commits that you have not fetched.
      </p>
    </assemblage>

    <warning xml:id="warn-fetch-often">
      <title>Fetch Upstream Often</title>
      <p>
        In my opinion, you want to keep the least amount of commits behind. If you are working on someone else's work, you want to stay up to date. If some big change happens, you should make sure you have that change on your fork. Why? Well, you don't want to overwrite anything someone else just did. You also don't want to work on adding a new feature that is already incorporated. Maybe the new change helps you do your work better/faster. You also want to avoid potential merge conflicts because someone else is change the same files you are.
      </p>
      <p>
        Therefore, it is usually recommended practice to fetch upstream as often as you can. At the very least, daily, especially if the project is popular and updated frequently. It is possible that there is no new upstream content to fetch but hey, at least you checked!
      </p>
      <p>
        This warning will repeat in <xref ref="C_gitcollab"/> when we talk about pulling and pushing.
      </p>
    </warning>

    <p>
      You may be wondering why you are even any commits behind! If your addition to my repository was accepted, then our repos should match, right? Not quite. Actually, that act of accepting your pull request and merging into my main branch was a commit in itself which is where the mystery commit comes from.
    </p>

    <activity xml:id="act-fetch-upstream">
      <introduction>
        <p>
          Enough talk, let's fetch that upstream!
        </p>
      </introduction>

      <task>
        <statement>
          <p>
            Find the <q>Fetch upstream</q> dialog box on the home page of your fork.
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Notice that GitHub will fetch and merge the upstream changes in one step (even though it is technically two steps). Great!
          </p>
          <p>
            It also emphasizes <xref ref="want-fetch-often"/> through a somewhat passive-aggressive reminder: <q>Keep your fork up-to-date with the upstream repository</q>.
          </p>
          <p>
            To make the magic happen, click on <q>Fetch and merge</q>.
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Bam. Done. But do make sure your fork now says <q>This branch is up to date with <c>ian-curtis/aboutme:main</c></q> (in general, this would be the name of whatever repo you forked from). Yours may also say, depending on when you fetched, that your branch is a number of commits ahead (but none behind).
          </p>
        </statement>
      </task>
    </activity>

  </subsection>

  <conclusion>
    <p>
      And there you go! Now you are ready to keep on editing or to go about your day. If you are interested in some other GitHub features related to collaborating, continue to <xref ref="S_hubcollabextra"/>. Otherwise, go to <xref ref="C_gitcollab"/> to see how to use Git commands and local edits to collaborate.
    </p>
  </conclusion>

</section>