<?xml version='1.0' encoding='utf-8'?>

<section xml:id="S_commands">
  <title>Basic Commands</title>
  <introduction>
    <p>
      Now that we have understand what a terminal does and how to find it, let's learn some commands. 
      We'll start with the basics.
    </p>
  </introduction>

  <subsection xml:id="navigatecommline">
    <title>Navigating Your Computer With the Command Line</title>
    
    <p>
      When your first open your terminal, you aren't given very much information. On Mac and Windows, 
      you get your username and maybe your computer name/id but not much else. This isn't very helpful.
      How can we do anything with our computer when we don't even know where we are on the computer?
    </p>
    
    <paragraphs xml:id="pwd">
      <title>Using <c>pwd</c></title>
    <p>
    <idx><h><c>pwd</c></h></idx>
    <idx><h>present working directory</h></idx>
    <idx><h>directory</h><h>present working</h></idx>
      Our first command will show us where we are: <c>pwd</c>, which stands for 
      <term>present working directory</term>. 
      <note xml:id="foldernotdirect">
        <title>Folders Are Not Directories</title>
        <p>
          Until now, I have been using <q>folder</q> when I probably should be using <q>directory</q>.
          From <url href="https://en.wikipedia.org/wiki/Directory_%28computing%29#Folder_metaphor" visual='en.wikipedia.org/wiki/Directory_%28computing%29#Folder_metaphor'>Wikipedia</url> 
          we can read that 
          <blockquote>
            If one is referring to a container of documents, the term folder is more appropriate.
            The term directory refers to the way a structured list of document files and folders are 
            stored on the computer.
          </blockquote>
          That's a little confusing! The difference here is mostly technical. Essentially, a 
          <term>directory</term> is a 
          <q>file system object</q> whereas a <term>folder</term> is just a user-friendly way to 
          represent directories. For our purposes (and for most purposes), the two terms can be used 
          interchangeably. I use <q>directory</q> when speaking about functions on the command line and 
          <q>folder</q> when speaking in informal settings. If you are interested, you can read more about 
          the history of the terms 
          <url href="https://www.quora.com/What-is-the-difference-between-a-folder-and-a-directory" visual='quora.com/What-is-the-difference-between-a-folder-and-a-directory'>at 
          this Quora question</url>.
        </p>
      </note>
    </p>

    <exercise xml:id="try-pwd">
      <title>Trying <c>pwd</c></title>
      <p>
        Enter <c>pwd</c> at your terminal. What does it tell you?
      </p>
    </exercise>

    <assemblage>
      
      <p>
        Anytime I talk about <q>enter something at your terminal</q>, type in the desired command 
        and press <kbd>Enter</kbd>.
      </p>
    </assemblage>

    <p>
      <c>pwd</c> prints one thing: the file path to the folder that is <q>active</q> at your terminal. 
      When you first open your terminal, Mac users might see something like <c>/Users/&lt;your-username></c> 
      and Windows (Git Bash) users <c>/c/Users/&lt;your-username></c>. If you ever get lost in your terminal, 
      type in <c>pwd</c> for some reassurance. 
    </p>
    </paragraphs>

    <paragraphs xml:id="cd">
      <title>Using <c>cd</c></title>
      <idx><h><c>cd</c></h></idx>
      <idx><h>change directory</h></idx>
      <idx><h>file-path syntax</h></idx>
      <idx><h>syntax</h><h>file-path</h></idx>
      <idx><h>directory</h><h>change</h></idx>
    <p>
      Knowing where you are is great, but as of right now, we are stuck in one place. What use is 
      <c>pwd</c> if we can't move anywhere? By default, your terminal places you in the <q>highest</q> 
      level possible; from there we can only move <q>in</q>. Essentially, you are moving from one 
      directory <em>into</em> another. The <c>cd</c>, or <term>change directory</term> command can do 
      this for us. <c>cd</c> requires another piece of information: the directory you wish to navigate to, 
      which must be typed using file-path syntax. 
    </p>
    <p>
      <term>File-path syntax</term> refers to how we describe where a file lies on your computer. The 
      basic structure is as follows:
    </p>
    <p>
        <c>/Users/your-username/main-folder/sub-folder1/.../file_name.file_extension</c>
    </p>
    <p>
      Note the forward slashes; the slashes separate folder names whereas periods separate file names 
      and file extensions. 
    </p>
    
    <exercise xml:id="try-cd">
      <title>Trying <c>cd</c></title>
      <statement>
        <p>
          Enter <c>cd Desktop/</c> into your terminal. Did anything change?
        </p>
      </statement>
      <hint>
        <p>
          Try running <c>pwd</c> after <c>cd</c>. Do you notice anything different here?
        </p>
      </hint>
    </exercise>

    <p>
      If everything went correctly, you should now be <q>in</q> your Desktop directory (folder, if you 
      insist). You may have even noticed that your terminal changed. On any operating system, you should 
      see that the word <q>Desktop</q> appeared before your cursor. This is a nice check to make sure that 
      <c>cd</c> worked and that you are where you want to be. 
    </p>
    </paragraphs>

    <paragraphs xml:id="ls">
      <title>Using <c>ls</c></title>
      
      <p>
        Ok, we're making progress! Now that we are in the Desktop, what can we do? Let's use another 
        terminal command to see what files and directories are currently on your Desktop. <c>ls</c>, or 
        <term>list contents</term> will do the trick. Note that the output will differ for each user as 
        we all have different files in different places.
      </p>

      <exercise xml:id="try-ls">
        <title>Trying <c>ls</c></title>
        
        <p>
          Enter <c>ls</c> into your terminal. What is the output? Is it what you expected?
        </p>
      </exercise>

      <p>
        Perhaps unsurprisingly, your terminal should have just listed every single element on your 
        Desktop. If you every forget what files are in your <q>active</q> directory (and you don't want to 
        open your file browswer and navigate to the folder), use <c>ls</c> as 
        a refresher.
      </p>

      <p>
        You may have noticed that some files/directories show up in your terminal that are not visible 
        on your Desktop. This is because most operating systems by default hide certain files that should 
        not be deleted. They still exist, they are just invisible to prevent accidental deletion. 
      </p>

    </paragraphs>
<!-- tk add note about not skipping directories with cd -->
  </subsection>


  <subsection xml:id="createfiles">
    <title>Adding Files and Directories</title>
    <introduction>
      <p>
        Now that we are familiar with navigating our computer with the command line, let's learn a little 
        more. Suppose you are in your Desktop (which we are) and you want to add a text file. Since you 
        are already in the terminal, you don't want to open a text editor, create a new file, and save it 
        to your desktop. Or, suppose you have a file on the Desktop that you no longer need and you don't 
        to open you file browser, navigate to the Desktop, and delete the file. These examples may seem 
        silly, but now suppose you are six folders deep. It would take much more time to navigate to those 
        folders in a file browser than it would in the terminal.
      </p>
    </introduction>

    <paragraphs xml:id="touch">
      <title>Using <c>touch</c></title>
      <idx><h><c>touch</c></h></idx>
      <idx><h>add file</h></idx>
      <idx><h>file</h><h>add</h></idx>
      <p>
        Creating a new file is simple. The command requires three parts:
        <ol>
          <li>
            <p>
              The word <c>touch</c>,
            </p>
          </li>
          <li>
            <p>
              The file name, and
            </p>
          </li>
          <li>
            <p>
              The file extension.
            </p>
          </li>
        </ol>

        All <term>touch</term> does is create an empty file with the name and file extension specified by 
        you on the command line. Why <c>touch</c> you ask? Well, everytime you edit (<q>write to</q>) 
        the file, you 
        are <q>touching</q> it electronically. 
      </p>
      <p>
        Note: Don't forget to follow <xref ref="filenamecases"/> when creating your files!
      </p>

      <exercise xml:id="try-touch">
        <title>Trying <c>touch</c></title>
        
        <task>
          <p>
            Enter <c>touch test.txt</c> into your terminal. What happened? Did it work as you expected?
          </p>
        </task>
        <task>
          <statement>
            <p>
              Can you use a command we learned earlier to check if your <c>touch</c> worked?
            </p>
          </statement>
        </task>
      </exercise>

      <p>
        Oh dear, nothing happened! When you press enter after a <c>touch</c> command, the terminal gives 
        you no output at all. How can we verify that a <c>test.txt</c> file got created? Let's try 
        <c>ls</c>. Recall from <xref text="title" ref="ls"/> that we can use <c>ls</c> to give us a list 
        of all the items in our present working directory. (Remember that term? See <xref text="title" ref="pwd"/>.) 
        Since we are currently on the Desktop and we want to see what files are on the Desktop, we can use 
        <c>ls</c> to see if our file was created. Try it now!
      </p>
      
      <activity xml:id="fileextensions">
        <title>File Extensions Matter</title>
        <introduction>
          <p>
            When <c>touch</c>ing a file, you <em>must</em> put the file extension at the end of the file name. 
            Otherwise, your computer won't know what type of file to create!
          </p>
        </introduction>
        
        <task>
          <statement>
            <p>
              Enter <c>touch text</c> at your terminal (it's safe, don't worry). 
            </p>
          </statement>
        </task>

        <task>
          <statement>
            <p>
              Everything should still work as before. Did the terminal print any output? 
              Try running <c>ls</c>. Does a file named <q>text</q> appear?
            </p>
          </statement>
        </task>

        <task>
          <statement>
            <p>
              Find the <c>text</c> file in your file browser and try to open it (by double clicking.)  
              What happens?
            </p>
          </statement>
          <answer>
            <p>
              Mac users likely see the TextEdit app open. This is the default app for opening files like 
              this. Windows users will be prompted to determine which application should be used to open 
              the file.
            </p>
          </answer>
        </task>

        <conclusion>
          <p>
            The purpose of this activity is to demonstrate the importance of file extensions. When none 
            are provided, your computer either has to guess what the file's contents are or simply cannot 
            interpret the file and asks you for help. We would like to avoid computer confusion as much as 
            possible. Common file extensions and their file types are listed in 
            <xref ref="S_fileextensions"/>. 
          </p>
        </conclusion>

      </activity>

      

      <p>
        Just remember, anytime you wish to create a file, you need <c>touch</c>, a name, and an extension.
      </p>

    </paragraphs>

    <paragraphs xml:id="open">
      <title>Using <c>open</c></title>
      <idx><h><c>open</c></h></idx>
      <idx><h><c>start</c></h></idx>
      <idx><h>open file</h></idx>
      <idx><h>file</h><h>open</h></idx>
      <p>
        Once a file is created, opening it is simple: just use the <c>open</c> (Mac) or <c>start</c> 
        (Windows) command. To <term>open</term> or <term>start</term>
        a file, we use a syntax similar to <c>touch</c>:
        <ol>
          <li>
            <p>
              The <c>open</c> or <c>start</c> command,
            </p>
          </li>
          <li>
            <p>
              The file name, and
            </p>
          </li>
          <li>
            <p>
              The file extension.
            </p>
          </li>
        </ol>

        Your terminal will choose the correct software to open the file based on the file extension, once 
        again stressing the importance of <xref ref="fileextensions"/>. Changing default programs is not a 
        part of this book, but a Google search should do the trick if you are interested.
      </p>

      <exercise xml:id="try-open">
        <title>Trying <c>open</c></title>
        
        
          <statement>
            <p>
              In <xref ref="try-touch"/>, we created a new file called <c>test.txt</c>. Open this file 
              with the terminal. If you are on a Mac, don't close it yet! Windows users may close the file 
              manually.
            </p>
          </statement>
      </exercise>
    </paragraphs>

    <paragraphs xml:id="killall">
      <title>Using <c>killall</c> (*)</title>
      <idx><h><c>killall</c></h></idx>
      <idx><h>close file</h></idx>
      <idx><h>file</h><h>close</h></idx>
      <p>
        <alert>This command is only on Mac.</alert>
      </p>
      <p>
        Closing a file is less trivial. It can be tricky to close a <em>single</em> file, but closing 
        an <em>entire application</em> is not too bad. You need two pieces:
        <ul>
          <li>
            <p>
              The command <c>killall</c>
            </p>
          </li>
          <li>
            <p>
              The name of the application you wish to close.
            </p>
          </li>
        </ul>

        A few remarks: The <term>kill all</term> command will quit the entire application, not just a single 
        file. Be sure you want to quit (i.e., you have saved any changes) before using kill all. Also, 
        application names are case sensitive; that is, <c>killall TextEdit</c> will work fine (on a Mac), but 
        <c>killall textedit</c> will return an error. Finally, be aware that if an application name has 
        a space in it (<eg/> Microsoft Word), you will need to enclose that name in quotes: 
        <c>killall 'Microsoft Word'</c>. You can use single or double quotes as long as you use the 
        same style for both.
      </p>

      <exercise xml:id="try-killall">
        <title>Trying <c>killall</c></title>
        
        <statement>
          <p>
            Use the terminal to close the <c>test.txt</c> file that we just opened in <xref ref="try-open"/>.
            Remember that the command is case sensitive!
          </p>
        </statement>
        <solution>
          <p>
            Your computer should have opened up TextEdit (the default text editor for Mac). To close 
            this application, you should enter <c>killall TextEdit</c> at the command line.
          </p>
        </solution>
      </exercise>
    </paragraphs>

    <paragraphs xml:id="mkdir">
      <title>Using <c>mkdir</c></title>
      <idx><h><c>mkdir</c></h></idx>
      <idx><h>make directory</h></idx>
      <idx><h>directory</h><h>make</h></idx>
      <p>
        We've seen how to use the terminal to create new files; however, sometimes files aren't enough. 
        With the command line, we can also create new directories 
        (represented by folders) for us with <c>mkdir</c>. The <term>make directory</term> command does 
        exactly that: makes a new directory.
      </p>

      <exercise xml:id="try-mkdir">
        <title>Trying <c>mkdir</c></title>
        <task>
        <statement>
          <p>
            Enter <c>mkdir testdir</c> on your command line. What happens? Is this what you expected 
            after learning about <c>touch</c>?
          </p>
        </statement>
        </task>
        <task>
          <statement>
            <p>
              Use <c>ls</c> to verify that the command worked.
            </p>
          </statement>
        </task>
      </exercise>

      <p>
        You should see, with <c>ls</c>, that a new directory was created. Windows users may see that their 
        new <q>testdir</q> is a different color (and has a <q>/</q>). They both indicate that <q>testdir</q> 
        is a directory. Mac users may not see these which thus stresses the importance of 
        <xref ref="fileextensions"/>. When <c>ls</c> is used, the file extension is printed (when there is one). 
        Directories do not have file extensions so when interpreting <c>ls</c> output, it can usually be safely 
        assumed that any item without an extension is a directory. Note that for any OS, 
        <xref ref="filenamecases"/> applies for <c>mkdir</c> as well.
      </p>
    </paragraphs>

    

    <activity xml:id="trycdtouch">
      <title>Putting It All Together, Part 1</title>
      <introduction>
        <p>
          It's time to put your skills to the test! Using your terminal and the knowledge gained from 
          this section so far, 
          complete the following tasks. This activity assumes you have been following along with the 
          checkpoints. 
        </p>
      </introduction>

      <task>
        <statement>
          <p>
            Navigate into the newly-created directory, <q>testdir</q>.
          </p>
        </statement>
        <answer>
          <p>
            <c>cd testdir</c> should do the trick!
          </p>
        </answer>
      </task>

      <task>
        <statement>
          <p>
            Determine if there are any files inside of this directory. What is the file path to 
            <q>testdir</q>?
          </p>
        </statement>
        <answer>
          <p>
            Use <c>ls</c> and <c>pwd</c> here.
          </p>
        </answer>
        <solution>
          <p>
            Since we just created this directory, <c>ls</c> should not show any files; no output should 
            be provided. <c>pwd</c> can be used to find the file path which should look like 
            <c>/Users/&lt;your-username>/Desktop/testdir</c> or 
            <c>/c/Users/&lt;your-username>/Desktop/testdir</c>
          </p>
        </solution>
      </task>

      <task>
        <statement>
          <p>
            Create a new text file with a name of <q>My Greeting</q>. Be sure to use proper naming techniques 
            and correct terminal syntax.
          </p>
        </statement>
        <hint>
          <p>
            You can use <c>ls</c> to verify that everything worked.
          </p>
        </hint>
        <answer>
          <p>
            <c>touch my_greeting.txt</c> OR <c>touch myGreeting.txt</c> OR <c>touch my-greeting.txt</c> 
            OR <c>MyGreeting.txt</c> OR <c>MY_GREETING.txt</c>
          </p>
        </answer>
        <solution>
          <p>
            Whenever we create a new file (of any type), we use <c>touch</c>. Recall that <c>touch</c> 
            requires three pieces: the command, the file name, and the file extension. The command is 
            <c>touch</c>, the file name is <c>my_greeting</c> (recommended, although there are other 
            possible names), 
            and the file extension is <c>.txt</c>. Put these together, and we get <c>touch my_greeting.txt</c>.
          </p>
        </solution>
      </task>
      
      <task>
        <statement>
          <p>
            Open your text file and type a greeting into the first line. Save the file.
            Remember to only use the command line to open the file!
          </p>
        </statement>
        <answer>
          <p>
            <c>open my_greeting.txt</c> OR <c>open &lt;file-name>.txt</c>
          </p>
        </answer>
      </task>

      <task>
        <statement>
          <p>
            Close your text file. Mac users should use the command line whereas Windows users will have 
            to close it manually.
          </p>
        </statement>
        <answer>
          <p>
            This is a <c>.txt</c> file: <c>killall TextEdit</c>.
          </p>
        </answer>
      </task>
    </activity>

  </subsection>

  <subsection xml:id="removefiles">
    <title>Removing Files and Directories</title>
    
    <introduction>
      <p>
        Over the course of this section, we have added useless files and directories. We do not need our 
        test files or folders anymore, so let's learn how to delete them (with the terminal, of course!)
      </p>
    </introduction>

    <paragraphs xml:id="rm">
      <title>Using <c>rm</c></title>
      <idx><h>rm</h></idx>
      <idx><h>remove file</h></idx>
      <idx><h>file</h><h>remove</h></idx>
      <p>
        <term>Removing</term> a file with <c>rm</c> has the exact same syntax as using <c>touch</c> 
        (<xref text="title" ref="touch"/>) except that instead of <c>touch</c>, we use <c>rm</c>. To summarize, 
        we would need
        <ul>
          <li>
            <p>
              The command <c>rm</c>,
            </p>
          </li>
          <li>
            <p>
              The file name, and
            </p>
          </li>
          <li>
            <p>
              The file extension.
            </p>
          </li>
        </ul>
      </p>

      <exercise xml:id="try-rm">
        <title>Trying <c>rm</c></title>
        
        <task>
          <statement>
            <p>
              Use <c>ls</c> and <c>pwd</c> to verify that you are still in the <c>testdir</c> directory 
              and that the file <c>my_greeting.txt</c> exists.
            </p>
          </statement>
        </task>

        <task>
          <statement>
            <p>
              Remove the file <c>my_greeting.txt</c>
            </p>
          </statement>
          <answer>
            <p>
              <c>rm my_greeting.txt</c>
            </p>
          </answer>
        </task>

        <task>
          <statement>
            <p>
              Use <c>ls</c> to verify that the process was successful.
            </p>
          </statement>
        </task>

      </exercise>

      <warning xml:id="removing-files">
        <title>Removing Files is Permanent</title>
        
        <p>
          Removing files is easy...Too easy. Notice that the terminal provided no output or verification 
          that the process was happening. Also notice that there was no dialog box asking if we were 
          really sure that we wanted to remove the file.
        </p>
        <p>
          <alert>Removing files with the terminal is permanent.</alert> There is no recycle bin for these 
          files. There is no <q>undo</q> or <q>restore</q>. The terminal deletes and forgets. Use extreme 
          caution when using <c>rm</c>; only remove what you are <em>absolutely sure</em> you need to remove. 
          You will not get a second chance and your computer will not ask you if you for verification.
        </p>
        <p>
          Note: you can add in an extra layer of security with the <c>sudo</c> command, which requires your 
          computer's password to be entered. See <xref provisional="using-sudo"/> in 
          <xref ref="S_advcommands"/>.
        </p>
      </warning>

    </paragraphs>

    <paragraphs xml:id="using-cd-backwards">
      <title><c>cd</c> Backwards</title>
      <idx><h><c>cd</c></h></idx>
      <idx><h><c>cd</c> backwards</h></idx>
      <idx><h>change directory backwards</h></idx>
      <idx><h>backwards <c>cd</c></h></idx>
      <idx><h>parent directory</h></idx>
      <idx><h>directory</h><h>parent</h></idx>
      <idx><h>directory</h><h>change backwards</h></idx>

      <p>
        Alright! We cleared the contents of our <c>testdir</c> directory. Remember, the ultimate goal of 
        this part is to delete <em>all</em> of the new files we created in this section. But now 
        we're stuck. The terminal is still in the <c>testdir</c> directory (which now contains no files). 
        In order to delete our other files we have to <term>change directories backwards</term>. Luckily, 
        we can still use <c>cd</c>, but instead of supplying a folder to move into, we give <c>..</c> 
        instead. Together, <c>cd ..</c> tells the terminal to move to the directory above the one it is 
        currently in (the <term>parent directory</term>).
      </p>

      <exercise xml:id="try-cd-backwards">
        <title>Trying <c>cd</c> Backwards</title>
        
        <statement>
          <p>
            Try it! Move backwards into the parent directory of <c>testdir</c>. 
          </p>
        </statement>
        <hint>
          <p>
            If successful, <c>pwd</c> should indicate that you are in the Desktop.
          </p>
        </hint>
        <answer>
          <p>
            <c>cd ..</c>
          </p>
        </answer>
        <solution>
          <p>
            As mentioned, <c>cd ..</c> will move you backwards. If you run <c>pwd</c>, you should see 
            that you have returned to the Desktop; <c>ls</c> should give you all of the files we were 
            working with before.
          </p>
        </solution>
        
      </exercise>
      
    </paragraphs>

    <paragraphs xml:id="using-rmdir">
      <title>Using <c>rmdir</c></title>
      <idx><h><c>rmdir</c></h></idx>
      <idx><h>remove directory</h></idx>
      <idx><h>directory</h><h>remove</h></idx>
      
      <p>
        You have the tools you need to remove files, but what about directories? If you'd like, try 
        removing our <c>testdir</c> directory with <c>rm</c>. What happens? 
      </p>
      <p>
        You should get an error 
        stating that <c>rm</c> cannot remove directories. Fortunately, there is an aptly named command 
        called <c>rmdir</c> which helps us <term>remove directories</term>. Using <c>rmdir</c> is exactly 
        like using <c>rm</c> except that you can only type names of directories.
      </p>

      <exercise xml:id="try-rmdir">
        <title>Trying <c>rmdir</c></title>
        
        <statement>
          <p>
            Use <c>rmdir</c> to remove the test directory, <c>testdir</c>. 
          </p>
        </statement>
        <answer>
          <p>
            <c>rmdir testdir</c>
          </p>
        </answer>
      </exercise>

      <warning xml:id="removing-directories">
        <title>Removing Directories is Permanent</title>
        
        <p>
          Similar to <xref ref="removing-files"/>, removing directories is too easy. 
          Notice again that the terminal provides no output or verification 
          that the process was happening. Also notice that there was again no dialog box asking if we were 
          really sure that we wanted to remove the directory.
        </p>
        <p>
          <alert>Removing directories with the terminal is permanent.</alert> 
          There is no recycle bin for these 
          files. There is no <q>undo</q> or <q>restore</q>. The terminal deletes and forgets. Use extreme 
          caution when using <c>rmdir</c>; only remove what you are <em>absolutely sure</em> you need 
          to remove. 
          You will not get a second chance and your computer will not ask you for verification.
        </p>
        <p>
          Note: you can add in an extra layer of security with the <c>sudo</c> command, which requires your 
          computer's password to be entered. See <xref provisional="using-sudo"/> in 
          <xref ref="S_advcommands"/>.
        </p>
      </warning>

    </paragraphs>
    
    <activity xml:id="try-removing">
      <title>Putting It All Together, Part 2</title>
      
      <introduction>
        <p>
          You now know the basics of using using the command line. In this activity, 
          you will practice what you have learned. Be sure to use the command line for each task.
        </p>
      </introduction>

      <task>
        <statement>
          <p>
            Verify that you are still on your Desktop. Remove the rest of the test files we created 
            throughout the chapter. Check to make sure all the files have been removed.
          </p>
        </statement>
        <answer>
          <p>
            Use <c>pwd</c> to check if still on Desktop, <c>rm &lt;file-name></c> to remove files,
            and <c>ls</c> to check if the files are gone.
          </p>
        </answer>
      </task>

      <task>
        <statement>
          <p>
            Navigate backwards one folder level.
          </p>
        </statement>
        <answer>
          <p>
            <c>cd ..</c>
          </p>
        </answer>
      </task>

      <task>
        <statement>
          <p>
            Navigate to your <c>Documents</c> folder. If you don't have one, create one and then navigate 
            to it.
          </p>
        </statement>
        <answer>
          <p>
            <c>cd Documents</c> OR <c>mkdir Documents</c>, then <c>cd Documents</c>
          </p>
        </answer>
      </task>

      <task>
        <statement>
          <p>
            Create a new folder called <q>My Favorites</q>. Remember to use proper naming techniques.
          </p>
        </statement>
        <answer>
          <p>
            <c>mkdir my-favorites</c> (could use a different case)
          </p>
        </answer>
      </task>
      
      <task>
        <statement>
          <p>
            Navigate into your newly-created directory. Verify that you are there.
          </p>
        </statement>
        <answer>
          <p>
            <c>cd my_favorites</c>, <c>pwd</c>
          </p>
        </answer>
      </task>

      <task>
        <statement>
          <p>
            Create three files: <q>Food</q> (a text file), <q>Hobbies</q> (a Word document), and 
            <q>Smells</q> (an Excel spreadsheet). Verify that these were created correctly.
          </p>
        </statement>
        <answer>
          <p>
            <c>touch food.txt</c>, <c>touch hobbies.docx</c>, <c>touch smells.xslx</c>; <c>ls</c>
          </p>
        </answer>
      </task>

      <task>
        <statement>
          <p>
            Open each of the three files, type your top three favorites of each category, and close 
            the files again. (Remember, Windows users will have to close the files manually).
          </p>
        </statement>
        <answer>
          <p>
            Mac: <c>open food.txt</c>, <c>killall TextEdit</c>; 
            <c>open hobbies.docx</c>, <c>killall 'Microsoft Word'</c>,
            <c>open smells.xslx</c>, <c>killall 'Microsoft Excel'</c>
          </p>
          <p>
            Windows: <c>start food.txt</c>, <c>start hobbies.docx</c>, <c>start smells.xslx</c>
          </p>
        </answer>
      </task>

      <task>
        <statement>
          <p>
            Sorry, I know you just edited the documents, but now, it's time to delete them. Remove 
            all three of the files you edited. Verify they were removed.
          </p>
        </statement>
        <answer>
          <p>
            <c>rm food.txt</c>, <c>rm hobbies.docx</c>, <c>rm smells.xslx</c>; <c>ls</c>
          </p>
        </answer>
      </task>

      <task>
        <statement>
          <p>
            Navigate back to your Documents folder. Verify you are indeed there.
          </p>
        </statement>
        <answer>
          <p>
            <c>cd ..</c>, <c>pwd</c>
          </p>
        </answer>
      </task>

      <task>
        <statement>
          <p>
            Remove the directory we created in this activity. Verify that is was removed.
          </p>
        </statement>
        <answer>
          <p>
            <c>rmdir my-favorites</c>, <c>ls</c>
          </p>
        </answer>
      </task>
      
    </activity>

  </subsection>
</section>