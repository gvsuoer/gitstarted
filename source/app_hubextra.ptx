<?xml version='1.0' encoding='utf-8'?>

<appendix xml:id="app_hubextra">
  <title>Extra GitHub Content</title>
  <idx><h>github</h><h>extra</h></idx>
  <introduction>
  <p>
    There are many features available on GitHub and we have barely scratched the surface. This book is not intended to explain the more advanced and niche aspects, but some of what GitHub offers is very useful to a wide audience and is worth a short discussion.
  </p>
  <p>
    All of the following can be found on repositories regardless of whether they are private or public. As you become more familiar with GitHub, this page may become useful to exploring some of what tools GitHub has to offer.
  </p>
  </introduction>

  <section xml:id="S_hubissues">
    <title>The Issues Tab</title>
    <idx><h>issues</h></idx>
    <idx><h>github</h><h>issues</h></idx>
    <p>
      You've seen when making pull requests that you can add comments or descriptions to help moderators understand what you are doing. This feature is also used as a place for conversation regarding the pull request and the problems is solves or brings up.
    </p>
    <p>
      But what happens if you want to talk about a problem without a pull request? What if you don't have the time or experience to edit a repository's contents but want to let moderators know of a potential bug or feature request? GitHub has something for you!
    </p>
    <p>
      The issues tab is designed as a place of conversation between developers, users, and other members of the community. It runs like a forum where anyone can create a thread (including the repo's owner) and anyone can reply or supply advice. Moderators will often tag issues and with a well-designed commit message, can close an issue automatically.
    </p>
    <p>
      Some issues have a label of <q>good first issue</q>. This indicates that the problem mentioned in the issue is not very difficult to fix and with a basic understand of that repo's files, a beginner could fix the issue. If you are interested in developing, I would recommend starting with good first issues.
    </p>
    <p>
      Note that the Issues tab will not appear on forks, only on the authoritative repository.
    </p>
    <figure xml:id="fig-hub-issues-gs">
      <caption>Example Issues page for this book</caption>
      <image source="hub_issues_gs" width="90%">
        <description>Issues page for this book, Git Started. No issues are present.</description>
      </image>
      
    </figure>
    <figure xml:id="fig-hub-issues-skl">
      <caption>Example Issues page for the <url href="https://github.com/scikit-learn/scikit-learn/issues" visual="github.com/scikit-learn/scikit-learn/issues">Python module <c>scikit-learn</c></url></caption>
      <image source="hub_issues_skl" width="90%">
        <description>Issues page for <c>scikit-learn</c>. Lots of issues are present, with tags and many contributors.</description>
      </image>
    </figure>
  </section>

  <section xml:id="S_hub-seecommits">
    <title>Commit History</title>
    <idx><h>commit history</h></idx>
    <idx><h>github</h><h>commit history</h></idx>
    <p>
      On the home page (Code tab) for all repositories a commit history can be found, full with contributor usernames, commit messages, and links to further information. Directly above the list of files, you can find information on the most recent commit. At the right side of this area is a clock icon with an arrow circling counterclockwise followed by a number of commits (See <xref ref="fig-hub-ncommits"/>). This is the total number of commits to that repository.
    </p>

    <figure xml:id="fig-hub-ncommits">
      <caption>The number of commits to a repository</caption>
      <image source="hub_ncommits" width="80%">
        <description>Most-recent-commit bar (above list of files). Contains total number of commits for a repository.</description>
      </image>
    </figure>

    <p>
      Clicking on this will give you more information on how often someone updates a repository and how many people do so. You are also able to see past branch names. Clicking on a specific commit will bring to a page with the files changed and any comments that were made.
    </p>
    <p>
      Not everyone will be interested in this feature, but it is useful to know it is there should you want to take advantage of it.
    </p>
  </section>

  <section xml:id="S_hub-about">
    <title>The About Panel</title>
    <idx><h>github</h><h>about panel</h></idx>
    <p>
      Most popular repositories have created and worked hard on their about panel. On any repo, this appears on the right side of the home page (Code tab) and it titled <q>About</q>. This panel may include
      <ul>
        <li>
          <p>
            A short description
          </p>
        </li>
        <li>
          <p>
            A website
          </p>
        </li>
        <li>
          <p>
            Topics (these are like tags)
          </p>
        </li>
        <li>
          <p>
            A release version number
          </p>
        </li>
        <li>
          <p>
            Any packages published in the repository
          </p>
        </li>
        <li>
          <p>
            Any environments associated with the repository (such as GitHub Pages)
          </p>
        </li>
      </ul>
    </p>

    <p>
      Also on this side of the page is a list of contributors, and the distribution of the langauges of the files in the repo (this can be off since GitHub doesn't recognize some file extensions). It's always nice to glance at this part of the page when looking at a repository just to get a general idea of what's going on or if it's what you are looking for. (A README will also help you understand more specific ideas about the repo content.)
    </p>
    
  </section>

  <section xml:id="S_hubcollabtree">
    <title>The Branch Tree Diagram (Network Graph)</title>
    <idx><h>tree diagram</h></idx>
    <idx><h>github</h><h>tree diagram</h></idx>
    <idx><h>branches</h><h>tree diagram</h></idx>
    <idx><h>network graph</h><see>tree diagram</see></idx>
    <p>
      Scattered throughout the book are various tree diagrams (created by me) depicting example branch pathways. Of course, these are highly variable depending on how many branches you have, commits you make, and contributors there are.
    </p>
    <p>
      Turns out, GitHub actually makes a graph of your branches for you, as you create, push, merge, and delete them. This is visible on all public repos. To get to this graph, visit the Insights tab and then the Network page from the left sidebar. And there it is! It might not look very exciting, depending on your workflow. Consider the one for this book as of May 2022 in <xref ref="fig-network-graph"/>.
    </p>

    <figure xml:id="fig-network-graph">
      <caption>Network graph for this book (as of May 2022)</caption>
      <image source="network_graph" width="80%">
        <description>Branch diagram for this book. Mostly a straight line (main branch) with small projections coming off and coming back in (branches and merging).</description>
      </image>
    </figure>
  </section>

  <section xml:id="S_hub_codespace">
    <title>Codespaces</title>
    
    <p>
      I personally prefer doing Git-related things on my personal computer (offline) and then updating GitHub when I'm ready. To me, it helps avoid unnecessary merge conflicts and make sure that my edits are only committed and pushed when I'm ready.
    </p>
    <p> 
      However, you don't have to work completely on your local computer. If you don't want to have all of this software downloaded (perhaps you're running out of storage space on your computer), there is another option: codespaces. This is <url href="https://github.com/features/codespaces" visual="github.com/features/codespaces"> hosted by GitHub</url> and creates
       an online, virtual instance of your code files. By creating a codespace, you are using a virtual machine which runs the <init>VS</init> Code and is automatically connected to your GitHub repo. Codespaces could be useful if you need to edit something quickly and/or don't have access to your personal computer but make sure you create a branch before making a codespace.
    </p>
    <p>
      If you choose to use this route, know that you are limited to 60 hours a month if you do not want to pay. You also should know that this is not available offline; an internet connection is required to work on a codespace. 
    </p>

    <p>
      So how do you make a codespace? It's easy!
      <ol>
        <li>
          <p>
            Head to the Code tab of your GitHub repository.
          </p>
        </li>
        <li>
          <p>
            Technically optional: create a branch. But I recommend you create a branch to lower the chance of conflicts.
          </p>
        </li>
        <li>
          <p>
            Click on the <q>Code</q> button (as if you were going to copy the HTTPS link for cloning).
          </p>
        </li>
        <li>
          <p>
            In the box that pops up, click on the Codespaces tab. In this tab is a button that says <q>Create codespace on &lt;branch-name&gt;</q>. A codespace will generate (it may take some time) and should be ready to go as soon as it's done.
          </p>
        </li>
      </ol>
    </p>

  </section>

  <section xml:id="S_hub_delete_repo">
    <title>Deleting a Repository</title>
    <idx><h>repository</h><h>delete</h></idx>
    <idx><h>github</h><h>delete repository</h></idx>
    <p>
      So you really to delete a repository? Think long and hard about this one. Are you sure? Are you really sure? Deleting repos is <em>irreversible</em> and can have lasting effects. For instance, all forks will be broken, but not deleted. If you delete a private repo, all forks will also be deleted. Any website that contains a link to your repo will no longer work and people might wonder where it went. And so on.
    </p>
    <p>
      But here you are, so clearly you have decided to delete one. To delete a repository, you have to enter the danger zone (<pubtitle>Top Gun</pubtitle> anyone?).
    </p>

    <activity xml:id="hub-delete-repo">
      <title>Deleting a Repository</title>
      
      <task>
        <statement>
          <p>
            Navigate to the repo you want to delete.
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Click on the Settings tab. This should be the settings for the repo itself, not the general settings for your profile.
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Scroll all the way down to the Danger Zone.
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Click on <q>Delete this repository</q>
          </p>
        </statement>
      </task>

      <task>
        <statement>
          <p>
            Read the dialog box that pops up. Once you have decided to delete the repo, type in what GitHub prompts you to type in and hit confirm.
          </p>
        </statement>
      </task>
      
    </activity>
    
  </section>

  <section xml:id="sec-hub-gitignore">
    <title>The <c>.gitignore</c> File</title>
    
    <p>
      As you gain more experience with Git and GitHub, you may start wondering if there is a way to hide files from public view. Your project may come with files that are private to you/your company and are not necessary to share with everyone else. You also may have programs that generate files that are used by a second program and these intermediate files do not need to be shared. Whatever the circumstance, you can choose to block a file or folder from being tracked by Git.
    </p>
    <p>
      The file for this is <c>.gitignore</c>. The dot in front of the file name is necessary as this specifies that the file is, by default, <q>hidden</q> when being viewed in a file browser (to prevent accidentaly deletion). You should be able to edit this file on GitHub or access it with your text editor.
    </p>
    <p>
      It is possible to generate a <c>gitignore</c> template when creating a repo. These can be helpful but for my projects, I prefer to add the file manually and fill it in myself as I go.
    </p>
    <p>
      All that goes in this file is a list of file/folder names and/or extensions you wish for Git to ignore. Keep one name per line. You can add comments to the file (to help break up sections) by starting a line with a hashtag (fine, a pound sign) and a space: <c># This is a comment</c>. For example,
      <cd>
        <cline># Ignore generated images folder</cline>
        <cline>generated-images/</cline>
        <cline></cline>
        <cline># Random files to ignore</cline>
        <cline>secret.txt</cline>
        <cline>private_data.csv</cline>
      </cd>
    </p>
    <p>
      As a bonus, <c>gitignore</c> files accept standard generalizing arguments and wildcards. For example, <c>*.pdf</c> will ignore anything with the <c>.pdf</c> file extension.
    </p>
    <p>
      You should know that once Git tracks a file (or folder), you can't just add that file's name (or folder) to the <c>gitignore</c> file and expect it to disappear. For any files you had Git tracking that you wish it would now ignore, see the instructions in <xref ref="S_untrackfiles"/>. Note that any files you treat in this manner will still exist in the commit history of your repo and on any forks for your repo (the next time a user pulls changes from your repo, their copy of the file will be deleted). See <xref ref="warn-untrack-delete"/>
    </p>

  </section>

  

</appendix>