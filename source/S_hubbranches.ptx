<?xml version='1.0' encoding='utf-8'?>

<section xml:id="S_hubbranches">
  <title>Working With Branches</title>
  <idx><h>branches</h></idx>
  <idx><h>github</h><h>branches</h></idx>
  <introduction>
    <p>
      Suppose you were writing a three-stanza poem for a contest. The final product must be handwritten on fancy letterhead, in high-quality black pen. As multiple drafts go by, you finalize the first and the third stanza. You're so confident in them that you write them on the letterhead in pen. But you're stuck on the second stanza.
    </p>
    <p>
      After some introspection and brainstorming, you finally come up with two potential second stanzas. But you can't decide between the two! You decide that the best way to figure out which one you like is to write each one in the poem and see if it flows with the rest. You can't just write one in the official poem (in pen!). What if the one you choose isn't what you like? Then you have to rewrite the entire poem.
    </p>
    <p>
      Instead, you decide to get out two pieces of scratch paper and write the poem in pencil and with a respective second stanza. That way you can hold them side-by-side and compare their flow. This method makes it easier for you to decide which of the two candidates you prefer. Once you have done so, you write the final stanza in pen on the letterhead and recycle the scratch paper with your drafts.
    </p>
    <p>
      Believe it or not, this potentially unrealistic example is a great demonstration of what Git and 
      Github call <term>branches</term>. Branches will be used extensively in the coming sections and chapters and are quite important to smoothing out your workflow.
    </p>
  </introduction>

  <subsection xml:id="SS_thinkbranch">
  <title>Thinking About Branches</title>
  <idx><h>main branch</h></idx>
  <idx><h>branches</h></idx>
  <p>
    Github organizes your edits and changes in a tree-like format. The official, published version of your files always lies on the <term>main branch</term>. You could think of the main branch as the trunk of a tree. When we created our README file back in <xref ref="S_hubfirstrepo"/>, we started on the main branch, edited a file, and commited right back to the main branch. It was as if we wrote something new in pen on our official letterhead. See <xref ref="fig-commit-main-poem"/> as a visualization of this type of commit. 
  </p>
  <figure xml:id="fig-commit-main-poem">
    <caption>Diagram of a commit from <c>main</c> to <c>main</c></caption>
    <image source="commit_main_poem" width="90%">
      <description>Arrow diagram. Main branch to README right back to main branch through commit</description>
    </image>
  </figure>
  <p>
    <em>This type of editing is usually discouraged.</em> It is best practice to create a new branch, made some edits there, then submit a pull request to merge your changes into the main branch.
  </p>

  <p>
    Whoa. I said a lot of stuff there. Lots of new words and things you don't know how to do. Don't worry, I'll guide you through it in this section. When you get a new project, you want to try and break it up into pieces. Each piece will have its own branch on the Github tree. For instance, the two poems that you wrote on scratch paper above were two branches off of the official poem. They each had the same first and third stanzas; only their second stanzas differed. See <xref ref="fig-branch-poem"/> for a visualization of branches in this instance.
  </p>
  <figure xml:id="fig-branch-poem">
    <caption>Diagram of two branches off of main</caption>
    <image source="branch_poem" width="100%">
      <description>Arrow diagram. Main branch splits into two branches, Poem 1 and Poem 2.</description>
    </image>
  </figure>
  <p>
  <idx><h>commit</h></idx>
  <idx><h>merge</h></idx>
  <idx><h>pull request</h></idx>
  <idx><h>request</h><see>pull request</see></idx>
  <idx><h>github</h><h>commit</h></idx>
  <idx><h>github</h><h>merge</h></idx>
  <idx><h>github</h><h>pull request</h></idx>
    Notice how in <xref ref="fig-branch-poem"/> that the main branch does not move forward when branches are created, it stops once a branch is made. When you first create a new branch, all you have is a copy of the main branch. However, when you edit your new branch, the changes do not appear into the main branch. Branches are like testing grounds. Try some new things, see if you like them, see if they work, then make it official. <q>Making it official</q> with Git and Github is called <term>committing</term> (as we have seen). Two new terms that go with commits<fn>Notice how <q>commit</q> is both a noun and a verb.</fn> are <term>merge</term> and <term>pull request</term>. Oftentimes, you will hear people say that they just merged their changes into main. This means they committed their changes to the main branch and updated the official version. With the poem example, there are two possible merges you could make into main, as diagrammed in <xref ref="fig-merge-poem"/>.
  </p>
  <figure xml:id="fig-merge-poem">
    <caption>Diagram showing a possible merge into main</caption>
    <image source="merge_poem1" width="90%">
      <description>Arrow Diagram. Main branch splits into two branches, Poem 1 and Poem 2. Poem 1 branch goes back into main.</description>
    </image>
    
  </figure>
  <figure>
  <caption>Diagram showing another possible merge into main</caption>
    <image source="merge_poem2" width="90%">
      <description>Arrow Diagram. Main branch splits into two branches, Poem 1 and Poem 2. Poem 2 branch goes back into main.</description>
    </image>
  </figure>
  <p>
    You will also often hear about pull requests. Recall how GitHub allows anyone to edit anyone else's code, but in order to change the official version, they have to ask for permission. The asking for permission is sending a pull request. You are asking the creator of the main branch their permission to pull in your changes. Don't worry too much about this now; we will cover it when we get to multi-person collaboration. You will see the term come up in this chapter however which is why I chose to introduce it here.
  </p>
  </subsection>

  <subsection xml:id="SS_makebranch">
    <title>Creating a Branch</title>
    <idx><h>github</h><h>branches</h></idx>
    <idx><h>branches</h><h>create</h></idx>
    <p>
      Creating a branch is not difficult. To do so, first make sure you are on the <q>Code</q> tab 
      of your repository titled <c>aboutme</c>. Below the list of tabs, you should have a row of 
      items. The first is a button with a branch-like icon with the word <q>main</q>. Next to that, there
      is the same branch-like icon with <q>1 branch</q> and then a tag-like icon with <q>0 tags</q> (<xref ref="fig-hub-new-branch"/>).
      <fn>Your numbers may be different if you played around with GitHub before this step.</fn> Now,

      <ol>
        <li>
          <p>
            Click on the word <q>main</q>. This will open a drop-down menu with all of your current branches (<xref ref="fig-hub-new-branch"/>). You probably only have one branch: the main branch.
          </p>
        </li>
        <li>
          <p>
            We will be adding a part to our README file: our favorite animal.
            Type <c>animal</c> in to the textbox that appears. Your cursor should navigate there automatically.
          </p>
        </li>
        <li>
          <p>
            Since we don't have a branch named <c>animal</c>, GitHub asks us if we want to create a new 
            branch with that name. That is indeed what we want to do. Click on <q>Create branch: animal from 'main'</q>
          </p>
        </li>
      </ol>
    </p>

    <figure xml:id="fig-hub-new-branch">
      <caption>Reference for creating a new branch on GitHub</caption>
      <sidebyside>
      <image source="hub_new_branch" width="90%">
        <description></description>
      </image>
      <image source="hub_new_branch_animal" width="90%">
        <description></description>
      </image>
      </sidebyside>
    </figure>

    <p>
      Once you have created the new branch <c>animal</c>, your screen will have changed slightly. The 
      branch-like icon with the word <q>main</q> has changed to say <q>animal</q>. This is how you will 
      know what branch you are looking at. Also notice how it says we have <q>2 branches</q>. We do: main 
      and animal. Right underneath those items, you may also notice GitHub has placed a box stating that 
      <q>This branch is up to date with main.</q>. This is what we should expect. This statement indicates 
      that the <c>main</c> branch and the <c>animal</c> branch are identical (see <xref ref="fig-hub-animal-initial"/>).
    </p>

    <figure xml:id="fig-hub-animal-initial">
      <caption>Diagram mapping branches after creating the animal branch</caption>
      <image source="hub_animal_initial" width="70%">
        <description>Arrow diagram. Main branch to animal branch.</description>
      </image>
    </figure>

    <assemblage xml:id="branchnotes">
      <title>A Few Notes on Branches</title>
      <idx><h>branches</h></idx>
      <p>
        <ul>
          <li>
            <p>
              Take caution when naming branches. You should follow the same guidelines the were discussed 
              with file and folder names in <xref ref="S_filenames"/>. 
            </p>
          </li>
          <li>
            <p>
              Branch names should be extremely descriptive in the shortest way possible. It is wise to 
              break up your project into distinct chunks and assign one branch for each chunk.
            </p>
          </li>
          <li>
            <p>
              It is very easy to get lost within branches. You can create sub-branches off of normal 
              branches. You can delete branches or ignore them. I advise only creating the branches you 
              need at the current moment. If sub-branches (i.e., sub-tasks) are something you are interested
              in working with, I would recommend keeping a picture of the relationship between branches.
            </p>
          </li>
          <li>
            <p>
              Once you are done with a branch, delete it. Otherwise, it will clog up your branch list. You can always create it again.
            </p>
          </li>
        </ul>
      </p>
    </assemblage>
  </subsection>

  <subsection xml:id="SS_workingbranch">
    <title>Working On a Branch</title>
    <idx><h>branches</h><h>edit</h></idx>
    <p>
      We named the new branch <c>animal</c> to describe the changes we plan to make: add our favorite
      animal. Editing a file on a branch is no different than editing a file on <c>main</c>. However, we 
      now have a safeguard. We can edit and commit as much as we want to the <c>animal</c> branch and 
      never make any changes to <c>main</c>. Returning 
      to the analogy at the beginning of the section, we no longer have to write in pen on fancy paper 
      unless we are sure we want to change something.
       
    </p>
    <p>
      Hopefully you are able to see the power in this. In a more serious project, commiting too early could have much bigger ramifications. Suppose I am coding a new character for a video game and the character has to use vulgar language. In a simple workflow, I would create a branch called <c>vulgar</c> or <c>new_npc</c> with a sub-branch of <c>language</c>. Then, I would incorporate my code on my branches. Once that was done, I would run my code to test that it worked. Then I would submit a pull request, requesting my boss to pull in my new changes into the official version of the game. They would likely take a look at my code and try it themselves before accepting the changes. But let's say I forgot to add in the censorship beep over the language. If I had just merged right into main, my mistake may have been missed and I could get in serious trouble. But since I worked on a branch, my forgetfulness can be caught before the changes get incorporated and there won't be any flustering to quickly revert changes or fix the error.
    </p>
    <exercise xml:id="editbranch">
      <title>Editing a File On a Branch</title>
      
      <statement>
        <p>
          Exploring the ideas in <xref text="title" ref="hub-editfile"/>, add a level two heading to your README called 
          <q>My Favorite Animal</q>. Underneath that, type your favorite animal. Do not commit yet.
        </p>
        <p>
          The current state of the branch is shown in <xref ref="fig-hub-animal-edit"/>.
        </p>
      </statement>
    </exercise>

    <figure xml:id="fig-hub-animal-edit">
      <caption>Diagram showing branches after add a favorite animal</caption>
      <image source="hub_animal_edit" width="100%">
        <description>Arrow diagram. Main branch to animal branch. Animal branch points to new edits.</description>
      </image>
    </figure>

    <p>
    <idx><h>commit message</h></idx>
    <idx><h>message</h><see>commit message</see></idx>
    <idx><h>github</h><h>commit message</h></idx>
      After you have made some changes, head to the <q>Commit changes</q> dialog (top right). Now, it is time to introduce commit messages. A <term>commit message</term> is a short, but informative (notice a recurring pattern?) note of what your changes do. You may be tempted to skip this when working with yourself. Please try to write the best commit messages <em>at all times</em>. When you look back at your repo in the future, it will be helpful for you to remember what you did. Commit messages also help others who may look at your project know what you did in each commit. You may see my various branch names and commit messages at <url href="https://github.com/ian-curtis/gitstarted/commits/main" visual="github.com/ian-curtis/gitstarted/commits/main">the commit list for this book on GitHub</url>.
    </p>
    <p>
      Let's create a commit message for our changes on the <c>animal</c> branch. In the <q>Commit changes</q> dialog, there is a text box that is autofilled with <q>Update README.md</q>. This is the default and for some instances may be enough. But I have the tendency to write slightly more detailed messages for my commits and I recommend you do so as well. Instead, type <q>add favorite animal</q>. There is no need to add the file name as this message will only be tied to the file(s) you have edited. (Later on, we will see that specific commit messages are only associated with the files you have staged and committed but that's a topic for <xref ref="C_gitsolo"/>.)
    </p>

    <assemblage xml:id="commitmessages">
      <title>A Note On Commit Messages</title>
      <idx><h>commit message</h></idx>
      <p>
        It is up to you how to format your message. Some people write in complete sentences while others 
        use incomplete sentences with capital letters. Some people use past tense, others present tense, 
        and even others use present participles (add<em>ing</em>). I choose to use present tense with 
        incomplete sentences and lowercase letters. But that's my preference. You should find what you 
        like and stick with it.
      </p>
      <p>
        <ellipsis/>Except when you're editing someone else's files. In this case, pay attention to how someone else words their commit messages and imitate them. This will make life easier for the owner of the files and for anyone else who looks at the files in the future. You may even find that your commit message is changed by the owner of a repository to match their guidelines.
      </p>
    </assemblage>

    <p>
      It is not necessary to fill out the description text box (feel free to do so if you would like!). Ensure the <q>Commit directly to the <c>animal</c> branch.</q> is selected, then click <q>Commit changes</q>.Your file should be updated! Just remember, <em>you have only updated the copy of the file on the <c>animal</c> branch, not <c>main</c></em>.
    </p>
    <p>
      Navigate back to the code tab to continue. Make sure you are still on the <c>animal</c> branch. 
      You can verify this by looking at the drop-down menu text or by checking the contents of your 
      README file (if your favorite animal is there, you are on the <c>animal</c> branch).
    </p>

    <figure xml:id="fig-hub-animal-commit">
      <caption>Diagram showing our commit from <c>animal</c> to <c>animal</c></caption>
      <image source="hub_animal_commit" width="90%">
        <description>Arrow diagram. Main branch to animal branch. Animal branch points to new edits. New edits points back to animal.</description>
      </image>
    </figure>
  </subsection>

  <subsection xml:id="SS_pullrequest">
    <title>Creating a Pull Request (with Yourself)</title>
    <idx><h>pull request</h></idx>
    <idx><h>github</h><h>pull request</h></idx>
    <idx><h>merge</h></idx>
    <idx><h>github</h><h>merge</h></idx>
    <p>
      Alright, so you've edited a file on a branch AND you are happy with your changes. Everything looks good and works well on the branch so you are ready to incorporate your changes into the official version of your project. This is called creating a <term>pull request</term>. It may sound odd to call it a pull request when it seems like you are actually <em>pushing</em> your changes toward the main branch. However, in cases where you don't have permission to access the main branch of another repo, so you have to request that someone <em>pull</em> your changes into the main branch.
    </p>
    <p>
      I admit, it is silly to have to work with pull requests when working solo. Why would I need to ask myself permission to pull in my own changes? But pull requests are essential when working with multiple collaborators and I recommend using branches and pull requests in your own individual work for practice, good habits, and safeguards against code failures.
    </p>
    <p>
    <idx><h>commit</h><h>ahead and behind</h></idx>
      Pull requests are only necessary when using branches (recall how when we edited the README file directly from the main branch we had no pull requests). We are currently in a situation that would require a pull request. How do we create one? First notice (on your GitHub repository for the <c>animal</c> branch) how a new message has appeared. This probably says
    </p>
      <blockquote>
        <p>
        This branch is 1 commit ahead of main.
        </p>
      </blockquote>
    <p>
      This is GitHub's way of telling you that the branch you are currently on has changes that are not reflected on the main branch. Specifically, we have committed one time and the changes from that single commit do not appear on main. We could go and edit the README file some more and commit those changes. In that case, we would be 2 commits ahead of main.
    </p>
    <p>
      The dialog box that contains this message also has another feature: a <q>Contribute</q> option.
      If you click on this option, a box pops up telling us again that we are 1 commit ahead of main. 
      Here, there is a button inviting us to <q>Open pull request</q>. Click on this. 
    </p>
    <p>
      There is a lot on this page but most of it will be dealt with later. For right now, notice that 
      GitHub tells us which branch we are trying to send to main at the top. <c>animal</c> should be on 
      the right and is pointing towards <c>main</c>. Next to this, you should see a check mark and an 
      <q>Able to merge</q> message. This is good; see <xref ref="S_mergeconflict"/> if your branches cannot be automatically merged.
    </p>
    <p>
      Your cursor should have automatically navigated to a dialog box. This has defaulted to our latest 
      commit message. You should make sure that you have put an informative message on what your pull request accomplishes as a whole. Remember, it is possible to have multiple commits before opening a pull request so you could have adjusted a few things. For us, <q>add favorite animal</q> is sufficient and we can open the pull request. Click on the <q>Create pull request</q> button.
    </p>
    <p>
      Nice, another new screen. This time notice how we have changed tabs. We are now in the <q>Pull requests</q> area (and not the Code tab), which should make sense. The pull requests page is for more than just accpeting pull requests. If someone else has contributed to your repo and has opened a pull request, you can start a conversation here. Suppose you have a question about someone's changes or think they should improve their addition before you approve it. You can say that here. 
    </p>
    <p>
      But we have no problems with ourselves. Our pull request has been created and is waiting for permission to be 
      pulled into main. In some instances, you will have to wait for a repo owner to accept your pull request.
      However, you are the repo owner and can <term>merge</term> the changes yourself. You can do this on the 
      current screen. Find the <q>Merge pull request</q> button. GitHub will give you the chance to edit 
      the message if necessary. Since we have no changes to make, click on <q>Confirm merge</q>.
    </p>
    <p>
      Hopefully you were given the <q>Pull request successfully merged and closed</q> message. From here, click on <q>Delete branch</q>. You should have no fear about deleting the branch at this point. Your changes will not be lost because you just incorporated them into <c>main</c>. You now have two identical copies of the same files and can get rid of the extraneous copy: your old branch. If it makes you feel better, GitHub keeps track of commits and merges. If you ever want to revert back to an old version, you can in <xref ref="S_hub_revert_commit"/>. For now, go back to the <q>Code</q> tab and verify that your favorite animal appears in the README in the main branch.
    </p>

    <figure xml:id="fig-hub-animal-merge">
      <caption>Diagram showing a pull request from <c>animal</c> to <c>main</c></caption>
      <image source="hub_animal_merge" width="90%">
        <description>Arrow diagram. Main branch to animal branch. Animal branch points to new edits. New edits points back to main.</description>
      </image>
    </figure>

    <exercise xml:id="solo-branch-pr">
      <title>Branches and Pull Requests</title>
      
      <introduction>
        <p>
          It is time to put together what you learned in this section and make some edits of your own.
          Don't be afraid to look back at what we did earlier for reassurance. Start this exercise on 
          the <q>Code</q> tab of your <c>aboutme</c> repo. The goal of this exercise is to add another section
          to the README file.
        </p>
      </introduction>
      
      <task>
        <p>
          Think about something about you that you have not put in the README yet. Perhaps your favorite 
          food, quote, or historical character. Once you have chosen what you want to add, create a 
          branch with an appropriate name.
        </p>
      </task>

      <task>
        <p>
          Edit your README file. You should have at the very least a new level two heading indicating 
          what you are adding and a piece of text with your addition. 
        </p>
      </task>

      <task>
        <p>
          Add an approporiate commit message and commit your changes to your new branch.
        </p>
      </task>

      <task>
        <p>
          Open a pull request to merge your changes into the main branch.
        </p>
      </task>

      <task>
        <p>
          Merge your new pull request into main and delete your old branch.
        </p>
      </task>

      <task>
        <p>
          Verify that your change did in fact get merged into main.
        </p>
      </task>
      
    </exercise>

  </subsection>

  <conclusion>
    <p>
      Congratulations! Hopefully you have a better understanding of how branches and pull requests work
      in GitHub (and their potential).
    </p>
  </conclusion>

</section>