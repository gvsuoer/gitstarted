<?xml version='1.0' encoding='utf-8'?>

<section xml:id="S_filenames">
  <title>File and Folder Names (*)</title>
  <introduction>
  <p>
    Take a minute and look at some of the files and folders on your computer. What do the names look like?
  </p>
  <p>
    Sorry, that probably wasn't very clear. Specifically, I want you to see if there are <em>spaces</em> 
    in your file and folder names. My guess is probably! Mine certainly had spaces before I learned more 
    about computers and got involved in Git and the command line.
  </p>
  <p>
    Take another look at some files/folders. What is your <q>capitalization scheme</q>? Is there a pattern?
    Do you name your files by what they contain? Do you have dates in your files? Do you have a group of 
    files with something like <q>File First Draft</q>, <q>File Second Draft</q>, 
    <q>File, revisions from colleague</q>, etc.? All of these can be problematic for computers and 
    even more so for humans interacting with computers. But enough talk <ellipsis/> why are these 
    common file naming methods so frowned upon?
  </p>
  <p>
    The following chunks go through my opinions on file naming conventions. But that's what they are: opinions, 
    suggestions. Following them will make your 
    life easier later on. But by all means, go ahead and ignore me and decide for yourself later if you want 
    to make a change. I probably won't pop up in your home and check your file names. Try not to get 
    too lost with these; an extensive example will be provided at the end of the section.
  </p>
  </introduction>

<subsection xml:id="SS_namingconventions">
  <title>Naming Conventions</title>
  <paragraphs xml:id="namesrevisions">
    <title>File Names With Revisions</title>
    
    <p>
      I'm willing to bet that most of us have been there: You write one draft, get feedback, save a 
      second draft as a new file, get feedback again, and finally make a new file with a final draft. 
      Then, you decide to make modifications to that final draft which is saved as a new file, etc., etc.
      This is great until you realize that now you have way too many files for a single document. How do 
      you know which one is real final draft? What if you open the wrong one and start editing? Now you 
      have to edit all of the files to make them match. 
    </p>
    <p>
      Sure, a computer can handle that many files and doesn't really care how many drafts or revisions you 
      have. But more files take up more storage space and increases the chances of confusing you! How on 
      earth can we solve this problem? It's not like there's a magic software that can keep track of all 
      of our changes in a single file.
    </p>
    <p>
      Ah, but there is! This magic software is called Git. Git specializes in <term>revision control</term>
      which means that you do not have to worry about twelve drafts. Git keeps track of your revision 
      history for you. If you are familiar with Google Docs, Git is very similar. Docs saves your changes and 
      makes it easy to revert back to an old version if you change your mind on anything. 
    </p>

    <p>
      For now, don't worry about Git; we will get there in <xref provisional="C_git"/>. Just know that 
      after reading this book, you won't have to worry about excess drafts and should never have to 
      save so many drafts again. 
    </p>

  </paragraphs>

  <paragraphs xml:id="namesdates">
    <title>File Names With Dates</title>
    
    <p>
      Ok, this isn't really that problematic. But I never understood why dates in file names had to be 
      so specific. Having years makes sense, maybe months. But days? Times? In my opinion, who cares 
      (no offense if this is how you name your files)?
      Once you start getting that specific with dates and times, you run into the same issue as in 
      <xref text="title" ref="namesrevisions"/>. Dates and times just make your file names incredibly 
      long, hard to read, and hard to use in the command line. Please try to avoid dates, other than years.
    </p>

  </paragraphs>

  <paragraphs xml:id="namesdescriptive">
    <title>Descriptive File Names</title>
    
    <p>
      File names should be descriptive! Furthermore, they should describe <em>what the file actually 
      contains/is about</em> and not some random name. Probably most of your files are descriptive? 
      That's great! But what's the catch? File names should also be short. Short, sweet, too the point, 
      and also descriptive. 
    </p>
    <p>
      That's pretty tricky, you might say. Sure, I respond, but you can take advantage of abbreviations and 
      word shortening tricks. For instance, suppose I had a file names like so:
        <blockquote>
          Chapters3_4_Overview of Sampling and Simple Random Sampling (SRS).pdf
        </blockquote>
      This is clearly descriptive. We know exactly what this PDF is about: it refers to chapters 3 and 4 
      of a textbook which is about sampling in general and digs into simple random sampling. But wow,
      it's really long. On my computer, it shows up as
        <blockquote>
          Chapters3_4_Overview of<ellipsis/>SRS).pdf
        </blockquote>
      Now do you know what this file contains? I don't. Yes, it's on chapters 3 and 4 but we are left 
      hanging as to what the chapters are an overview of! Moreover, what does the random <q>SRS</q> mean 
      at the end?
    </p>
    <p>
      If it were me, I would rather name this file (based on the conventions discussed so far)
        <blockquote>
          Ch3_4_Sampling and SRS.pdf
        </blockquote>
      Wow! So much shorter. Do you still have an idea of what the file contains? Hopefully! <q>Ch</q> is 
      usually accepted as an abbreviation for <q>Chapter</q> so it is clear that this file is over 
      chapters 3 and 4. The subject of these chapters is sampling and simple random sample (<q>SRS</q> is 
      a widely-used abbreviation in statistics for simple random sampling).
    </p>

    <assemblage>
      <title>File Naming Trick #1</title>
      <p>
        An easy way to shorten file names is to remove the vowels from words. The human brain is 
        incredible in that it can determine what a word should be based on a small amount of context. 
        Assuming the file above was in a folder pertaining to statistics, I could shorten it even more:
          <blockquote>
            Ch3_4_Smplng and SRS.pdf
          </blockquote>
        And we still know what it's about!
      </p>
    </assemblage>

    <p>
      Summary: keep your file names short and to the point. Describe what the file is (I wouldn't name 
      the file above <q>bananas.pdf</q>!).
    </p>

  </paragraphs>

  <paragraphs xml:id="namesspaces">
    <title>File Names With Spaces</title>
    <p>
      If you only follow one convention in this section, this would be the one. This the most important 
      for working with the command line. Spaces in file names increase the amount of typing you have to do 
      and make it more difficult to understand what's going on on the command line.
    </p>
    <p>
      For instance, suppose I wanted to open the file we discussed earlier. On the command line, I would 
      open the file like this (don't worry about the commands, just notice what it looks like):
        <blockquote>
          <c>cd 'Chapters3_4_Overview of Sampling and Simple Random Sampling (SRS).pdf'</c>
        </blockquote>
      I could also do it like this:
        <blockquote>
          <c>cd Chapters3_4_Overview\ of\ Sampling\ and\ Simple\ Random\ Sampling\ (SRS).pdf</c>
        </blockquote>

      What you should notice is that in the first example, the file is surrounded in quotes and in the 
      second, there are a bunch of backslashes. For each file name with spaces, you have to either 
      remember to enclose the entire name in quotes or to take the time to put a backslash before every 
      space (see <xref provisional="escape-characters"/>). It may not seem like too much of a hassle, but 
      you will get annoyed with it pretty quickly. It also can cause setbacks inside code editors when you 
      want to import or export files with spaces.
    </p>
    <p>
      So what do we replace the spaces with?

      <note xml:id="filenamecases">
          <title>Alternative Naming Options</title>
          <idx><h>cases</h></idx>
          <idx><h>file naming</h></idx>
          <idx><h>naming</h><h>files</h></idx>
          <p>
            Most computer programmers name their files using <term>cases</term>. 
            There are five main cases: 
            <dl width="wide">
              <li>
                <title>snake_case</title>
                <p>
                  no capital letters, spaces are replaced with underscores (_)
                </p>
              </li>
              <li>
                <title>kebab-case</title>
                <p>
                  no capital letters, spaces are replaced with hyphens (-)
                </p>
              </li>
              <li>
                <title>camelCase</title>
                <p>
                  first word is lowercase, all consequent words are capitalized; spaces are removed
                </p>
              </li>
              <li>
                <title>PascalCase</title>
                <p>
                  every word is capitalized, spaces are removed
                </p>
              </li>
              <li>
              <!-- fix this title overlap -->
                <title>UPPER_CASE_SNAKE_CASE</title>
                <p>
                  every letter is capitalized, spaces are replaced with underscores (_)
                </p>
              </li>
            </dl>
            See a
            <url href="https://chaseadams.io/posts/most-common-programming-case-types/">Most Common 
            Programming Case Types</url> blog post to get more details on these cases.
          </p>
        </note>

        Personally, I use snake_case for file names and kebab-case for folder names, just to help me 
        keep them separate and still easy to read. 
    </p>
    <p>
      Using the shortened file name above, I would use the following as my file name:
        <blockquote>
          ch3_4_smplng_srs.pdf
        </blockquote>
      Note that I got rid of the <q>and</q>. Cases are useful in that they make it easy to remove articles 
      and prepositions which in turn helps us keep file names nice and short.
    </p>
    <p>
      It's worth repeating once again. File names should not contain spaces.
    </p>
    <p>
      Sorry, once more. This time, I'm going to yell. <alert>File names should not contain spaces.</alert>
    </p>
  </paragraphs>

  <paragraphs>
    <title>A Quick Note on Folder Names</title>
    
    <p>
      Folder names should also follow all of the conventions above. 
      This is a lot harder to get used to. I still feel like I'm breaking the Human Code of Folder Names 
      everytime I ignore spaces and capital letters. We're taught in school to start every sentence with 
      a capital letter and put spaces between words. For whatever reason, I'm fine with file names, but 
      folder names just don't feel right.
    </p>
    <p>
      But too bad for me! I name my folders according to the conventions anyways. And you should too.
      (As I mentioned earlier, I use snake_case for files and kebab-case for folders. I highly recommend 
      you do as well; they are the two most popular cases.)
    </p>
  </paragraphs>
</subsection>

<subsection xml:id="SS_practicenaming">
  <title>Exploring File Naming Techniques</title>
  
  <introduction>
    <p>
      Wow, there were a lot of words in <xref ref="SS_namingconventions"/>. Let's make sense of them here 
      with an extensive example. There will be some questions throughout the way. I encourage you to think 
      about them and make sure you have understood the naming conventions above.
    </p>
  </introduction>
</subsection>
 
</section>